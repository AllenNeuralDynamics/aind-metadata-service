# coding: utf-8

"""
    aind-metadata-service

     ## aind-metadata-service  Service to pull data from example backend.  

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutputDirectory(BaseModel):
    """
    Location to metadata file data to. None to return object.
    """ # noqa: E501
    anyof_schema_1_validator: Optional[StrictStr] = None
    anyof_schema_2_validator: Optional[StrictStr] = None
    actual_instance: Optional[Any] = None
    any_of_schemas: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["anyof_schema_1_validator", "anyof_schema_2_validator", "actual_instance", "any_of_schemas"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputDirectory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if anyof_schema_1_validator (nullable) is None
        # and model_fields_set contains the field
        if self.anyof_schema_1_validator is None and "anyof_schema_1_validator" in self.model_fields_set:
            _dict['anyof_schema_1_validator'] = None

        # set to None if anyof_schema_2_validator (nullable) is None
        # and model_fields_set contains the field
        if self.anyof_schema_2_validator is None and "anyof_schema_2_validator" in self.model_fields_set:
            _dict['anyof_schema_2_validator'] = None

        # set to None if actual_instance (nullable) is None
        # and model_fields_set contains the field
        if self.actual_instance is None and "actual_instance" in self.model_fields_set:
            _dict['actual_instance'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputDirectory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anyof_schema_1_validator": obj.get("anyof_schema_1_validator"),
            "anyof_schema_2_validator": obj.get("anyof_schema_2_validator"),
            "actual_instance": obj.get("actual_instance"),
            "any_of_schemas": obj.get("any_of_schemas")
        })
        return _obj


