# coding: utf-8

"""
    aind-metadata-service

     ## aind-metadata-service  Service to pull data from example backend.  

    The version of the OpenAPI document: 1.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_metadata_service_client.models.job_settings import JobSettings

class TestJobSettings(unittest.TestCase):
    """JobSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobSettings:
        """Test JobSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobSettings`
        """
        model = JobSettings()
        if include_optional:
            return JobSettings(
                job_settings_name = '',
                input_source = aind_metadata_service_client.models.input_source.InputSource(
                    anyof_schema_1_validator = '', 
                    anyof_schema_2_validator = '', 
                    anyof_schema_3_validator = [
                        ''
                        ], 
                    anyof_schema_4_validator = [
                        ''
                        ], 
                    actual_instance = null, 
                    any_of_schemas = [
                        ''
                        ], ),
                output_directory = aind_metadata_service_client.models.output_directory.OutputDirectory(
                    anyof_schema_1_validator = '', 
                    anyof_schema_2_validator = '', 
                    actual_instance = null, 
                    any_of_schemas = [
                        ''
                        ], ),
                user_settings_config_file = aind_metadata_service_client.models.user_settings_config_file.UserSettingsConfigFile(
                    anyof_schema_1_validator = '', 
                    anyof_schema_2_validator = '', 
                    actual_instance = null, 
                    any_of_schemas = [
                        ''
                        ], ),
                experimenter_full_name = [
                    ''
                    ],
                subject_id = '',
                imaging_laser_wavelength = 56,
                fov_imaging_depth = 56,
                fov_targeted_structure = '',
                notes = '',
                mouse_platform_name = '',
                active_mouse_platform = True,
                session_type = '',
                iacuc_protocol = '',
                rig_id = '',
                behavior_camera_names = [
                    ''
                    ],
                ch1_filter_names = [
                    ''
                    ],
                ch1_detector_name = '',
                ch1_daq_name = '',
                ch2_filter_names = [
                    ''
                    ],
                ch2_detector_name = '',
                ch2_daq_name = '',
                imaging_laser_name = '',
                photostim_laser_name = '',
                stimulus_device_names = [
                    ''
                    ],
                photostim_laser_wavelength = 56,
                fov_coordinate_ml = aind_metadata_service_client.models.fov_coordinate_ml.FovCoordinateMl(
                    anyof_schema_1_validator = null, 
                    anyof_schema_2_validator = '', 
                    actual_instance = null, 
                    any_of_schemas = [
                        ''
                        ], ),
                fov_coordinate_ap = None,
                fov_reference = '',
                starting_lickport_position = [
                    null
                    ],
                behavior_task_name = '',
                hit_rate_trials_0_10 = None,
                hit_rate_trials_20_40 = None,
                total_hits = None,
                average_hit_rate = None,
                trial_num = None,
                timezone = '',
                additional_properties = {
                    'key' : null
                    }
            )
        else:
            return JobSettings(
                experimenter_full_name = [
                    ''
                    ],
                subject_id = '',
                imaging_laser_wavelength = 56,
                fov_imaging_depth = 56,
                fov_targeted_structure = '',
                notes = '',
        )
        """

    def testJobSettings(self):
        """Test JobSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
