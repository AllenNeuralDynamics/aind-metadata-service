"""Module template autogenerated from SharePoint schema."""

import re
from dataclasses import dataclass
from datetime import date, datetime
from decimal import Decimal, DecimalException
from enum import Enum
from typing import Any, List, Optional

from aind_data_schema.components.injection_procedures import (
    Injection,
    InjectionDynamics,
    InjectionProfile,
    NonViralMaterial,
    ViralMaterial,
)
from aind_data_schema.components.subject_procedures import Surgery
from aind_data_schema_models.coordinates import AnatomicalRelative
from aind_data_schema_models.mouse_anatomy import InjectionTargets
from aind_data_schema_models.units import VolumeUnit
from aind_sharepoint_service_async_client.models import (
    Las2020List,
    LASDoseroute,
    LASRosop,
)
from pydantic_core import ValidationError


class IacucProtocol(Enum):
    """Enum class for Iacuc Protocols."""

    N_2103 = "2103"
    N_2104 = "2104"
    N_2105 = "2105"
    N_2106 = "2106"
    N_2107 = "2107"
    N_2109 = "2109"
    N_2110 = "2110"
    N_2112 = "2112"
    N_2113 = "2113"
    N_2114 = "2114"
    N_2115 = "2115"
    N_2116 = "2116"
    N_2117 = "2117"
    N_2118 = "2118"
    N_2119 = "2119"
    N_2120 = "2120"
    N_2201 = "2201"
    N_2202 = "2202"
    N_2204 = "2204"
    N_2205 = "2205"
    N_2207 = "2207"
    N_2212 = "2212"
    N_2301 = "2301"
    N_2304 = "2304"
    N_2305 = "2305"
    N_2306 = "2306"
    N_2307 = "2307"
    N_2308 = "2308"
    N_2401 = "2401"
    N_2402 = "2402"
    N_2405 = "2405"
    N_2406 = "2406"
    N_2412 = "2412"


@dataclass
class RequestedProcedureInfo:
    """Container for requested procedure information"""

    procedure: Optional[str] = None
    preferred_age: Optional[Decimal] = None
    preferred_date: Optional[date] = None


@dataclass
class InjectableMaterial:
    """Container for injectable material information"""

    substance: Optional[str] = None
    prep_lot_id: Optional[str] = None
    genome_copy: Optional[str] = None
    virus_volume: Optional[Decimal] = None
    titer: Optional[str] = None


@dataclass
class RetroOrbitalInjectionInfo:
    """Container for ro injection information"""

    # TODO: support "either for eye"
    ro_sop: Optional[LASRosop] = None
    animal_id: Optional[str] = None
    injection_eye: Optional[AnatomicalRelative] = None
    injection_volume: Optional[Decimal] = None
    tube_label: Optional[str] = None
    box_label: Optional[str] = None
    injectable_materials: Optional[List[InjectableMaterial]] = None


class LASProcedure(Enum):
    """Enum class of requested procedure types"""

    BLOOD_COLLECTION = "Blood Collection"
    CEREBROSPINAL_FLUID = "Cerebrospinal Fluid Collection (CSF)"
    DOSING = "Dosing"
    INDUCTION = "Induction"
    IC_INJECTION = "Intracerebroventricular Injection"
    OTHER = "Other"
    RETRO_ORBITAL_INJECTION = "Retro-Orbital Injection"
    TISSUE_COLLECTION = "Tissue Collection"


class MappedLASList:
    """Mapped Fields in SharePoint list."""

    STANDARD_DOSE_REGEX = re.compile(
        r"^([a-zA-Z0-9\s\-\(\)]+?)\s+(\d+(\.\d+)?)?\s*([a-zA-Z%\/]+)?"
    )
    DOSE_PAREN_REGEX = re.compile(r"\((\d+(\.\d+)?)\s*([a-zA-Z%\/]+)\)")
    SCIENTIFIC_NOTATION_REGEX = re.compile(r"^[-+]?\d+(?:\.\d+)?[eE][-+]?\d+$")
    VALUE_WITH_UNIT_REGEX = re.compile(r"^([\d\.eE+-]+)\s*(\S+)$")
    INTEGER_REGEX = re.compile(r"^[+-]?\d+$")

    def __init__(self, las: Las2020List):
        """Class constructor."""
        self._las = las

    @staticmethod
    def _parse_basic_decimal_str(value: Optional[str]) -> Optional[Decimal]:
        """Parse string representation of decimal such as '0.25'."""
        try:
            return None if value is None else Decimal(value)
        except (ValueError, DecimalException):
            return None

    @staticmethod
    def _parse_datetime_to_date(dt: Optional[datetime]) -> Optional[date]:
        """Parse date from datetime"""
        return None if dt is None else dt.date()

    def _parse_dose_sub_to_nonviral_material(
        self, dose_sub: Optional[str]
    ) -> Optional[NonViralMaterial]:
        """
        Parses substance name, concentration, and concentration unit from dose
        if it follows a common pattern into aind NonViralMaterial model.
        """
        # if string is long it probably contains too much information
        if (dose_sub and len(dose_sub) > 30) or dose_sub is None:
            return None

        match = re.match(self.STANDARD_DOSE_REGEX, dose_sub.strip())
        if match:
            material = match.group(1).strip().lower().capitalize()
            concentration_value = match.group(2) if match.group(2) else None
            concentration_unit = (
                match.group(4).lower() if match.group(4) else None
            )

            # If no concentration found, look in parentheses
            if not concentration_value or not concentration_unit:
                parens_match = re.search(self.DOSE_PAREN_REGEX, dose_sub)
                if parens_match:
                    concentration_value = parens_match.group(1)
                    concentration_unit = parens_match.group(3).lower()
            # use construct bc missing source
            return NonViralMaterial.model_construct(
                name=material,
                concentration=self._parse_basic_decimal_str(
                    concentration_value
                ),
                concentration_unit=concentration_unit,
            )
        else:
            # If it doesn't match pattern, return full string in name
            return NonViralMaterial.model_construct(
                name=dose_sub,
            )

    def _is_scientific_notation(self, value_str: str) -> bool:
        """Checks whether titer field is in scientific notation."""
        return bool(re.search(self.SCIENTIFIC_NOTATION_REGEX, value_str))

    def _is_value_with_unit(self, value_str: str) -> bool:
        """Checks whether titer field is in titer with unit format."""
        return bool(re.search(self.VALUE_WITH_UNIT_REGEX, value_str))

    def _parse_titer_str(self, titer_str: str) -> Optional[float]:
        """Parse string representation of titer into float."""
        if re.match(self.INTEGER_REGEX, titer_str):
            return int(float(titer_str))
        return None

    def _parse_titer(self, titer_str: Optional[str]) -> Optional[tuple]:
        """Parses titer field to integer."""
        unit = "gc/mL"  # default unit
        if titer_str is None:
            return None, unit

        titer_str = titer_str.strip()
        numeric_value = self._parse_titer_str(titer_str)
        if numeric_value is not None:
            return numeric_value, unit

        titer_str = titer_str.strip()
        # If the string matches scientific notation
        if self._is_scientific_notation(titer_str):
            titer = float(
                re.match(self.SCIENTIFIC_NOTATION_REGEX, titer_str).group(0)
            )
            return int(titer), unit  # Always return an integer

        # Check if the string has a value with unit
        elif self._is_value_with_unit(titer_str):
            match = re.match(self.VALUE_WITH_UNIT_REGEX, titer_str)
            titer = match.group(1)
            unit = match.group(2)
            # Convert only the numeric value part
            numeric_value = self._parse_titer_str(titer)
            if numeric_value is not None:
                return numeric_value, unit

        # If none of the above, return None with default unit
        return None, unit

    @staticmethod
    def _parse_iacuc_protocol(protocol: str) -> Optional[str]:
        """Parses IACUC protocol information from a string."""
        match = re.match(r"^(\d+)", protocol)
        if match:
            return match.group(1).strip()
        return None

    @property
    def aind_author_id(self) -> Optional[Any]:
        """Maps author_id to aind model."""
        return (
            None
            if self._las.author_id is None
            else f"LAS-{str(self._las.author_id)}"
        )

    @property
    def aind_author_lookup_id(self) -> Optional[str]:
        """Maps author_lookup_id to aind model"""
        return (
            None
            if self._las.author_lookup_id is None
            else f"LAS-{str(self._las.author_lookup_id)}"
        )

    @property
    def aind_dose_route(self) -> Optional[LASDoseroute]:
        """Maps dose_route to aind model"""
        return self._las.dose_route

    @property
    def aind_dose_sub(self) -> Optional[NonViralMaterial]:
        """Maps dose_sub to aind model"""
        return self._parse_dose_sub_to_nonviral_material(self._las.dose_sub)

    @property
    def aind_dose_where(self) -> Optional[str]:
        """Maps dose_where to aind model"""
        return self._las.dose_where

    @property
    def aind_doseduration(self) -> Optional[Decimal]:
        """Maps doseduration to aind model"""
        if self._is_value_with_unit(self._las.doseduration):
            match = re.match(self.VALUE_WITH_UNIT_REGEX, self._las.doseduration)
            return self._parse_basic_decimal_str(match.group(1))
        return self._parse_basic_decimal_str(self._las.doseduration)

    @property
    def aind_dosevolume(self) -> Optional[Decimal]:
        """Maps dosevolume to aind model"""
        if self._is_value_with_unit(self._las.dosevolume):
            match = re.match(self.VALUE_WITH_UNIT_REGEX, self._las.dosevolume)
            return self._parse_basic_decimal_str(match.group(1))
        else:
            return self._parse_basic_decimal_str(self._las.dosevolume)

    @property
    def aind_n_roid1(self) -> Optional[str]:
        """Maps n_roid1 to aind model"""
        return self._las.n_roid1.strip() if self._las.n_roid1 else None

    @property
    def aind_n_roid2(self) -> Optional[str]:
        """Maps n_roid2 to aind model"""
        return self._las.n_roid2.strip() if self._las.n_roid2 else None

    @property
    def aind_n_roid3(self) -> Optional[str]:
        """Maps n_roid3 to aind model"""
        return self._las.n_roid3.strip() if self._las.n_roid3 else None

    @property
    def aind_n_roid4(self) -> Optional[str]:
        """Maps n_roid4 to aind model"""
        return self._las.n_roid4.strip() if self._las.n_roid4 else None

    @property
    def aind_n_roid5(self) -> Optional[str]:
        """Maps n_roid5 to aind model"""
        return self._las.n_roid5.strip() if self._las.n_roid5 else None

    @property
    def aind_n_start_date(self) -> Optional[date]:
        """Maps n_start_date to aind model"""
        return self._parse_datetime_to_date(self._las.n_start_x0020_date)

    @property
    def aind_protocol(self) -> Optional[str]:
        """Maps protocol to aind model using _parse_iacuc_protocol."""
        if self._las.protocol is None:
            return None
        return self._parse_iacuc_protocol(str(self._las.protocol.value))

    @property
    def aind_req_pro1(self) -> Optional[LASProcedure]:
        """Maps req_pro1 to aind model"""
        return (
            None
            if self._las.req_pro1 is None
            else {
                self._las.req_pro1.TISSUE_COLLECTION: (
                    LASProcedure.TISSUE_COLLECTION
                ),
                self._las.req_pro1.INDUCTION: LASProcedure.INDUCTION,
                self._las.req_pro1.DOSING: LASProcedure.DOSING,
                self._las.req_pro1.RETRO_ORBITAL_INJECTION: (
                    LASProcedure.RETRO_ORBITAL_INJECTION
                ),
                self._las.req_pro1.INTRACEREBROVENTRICULAR: (
                    LASProcedure.IC_INJECTION
                ),
                self._las.req_pro1.BLOOD_COLLECTION: (
                    LASProcedure.BLOOD_COLLECTION
                ),
                self._las.req_pro1.CEREBROSPINAL_FLUID_COL: (
                    LASProcedure.CEREBROSPINAL_FLUID
                ),
                self._las.req_pro1.OTHER: LASProcedure.OTHER,
            }.get(self._las.req_pro1, None)
        )

    @property
    def aind_req_pro2(self) -> Optional[LASProcedure]:
        """Maps req_pro2 to aind model"""
        return (
            None
            if self._las.req_pro2 is None
            else {
                self._las.req_pro2.TISSUE_COLLECTION: (
                    LASProcedure.TISSUE_COLLECTION
                ),
                self._las.req_pro2.INDUCTION: LASProcedure.INDUCTION,
                self._las.req_pro2.DOSING: LASProcedure.DOSING,
                self._las.req_pro2.RETRO_ORBITAL_INJECTION: (
                    LASProcedure.RETRO_ORBITAL_INJECTION
                ),
                self._las.req_pro2.INTRACEREBROVENTRICULAR: (
                    LASProcedure.IC_INJECTION
                ),
                self._las.req_pro2.BLOOD_COLLECTION: (
                    LASProcedure.BLOOD_COLLECTION
                ),
                self._las.req_pro2.CEREBROSPINAL_FLUID_COL: (
                    LASProcedure.CEREBROSPINAL_FLUID
                ),
                self._las.req_pro2.OTHER: LASProcedure.OTHER,
            }.get(self._las.req_pro2, None)
        )

    @property
    def aind_req_pro3(self) -> Optional[LASProcedure]:
        """Maps req_pro3 to aind model"""
        return (
            None
            if self._las.req_pro3 is None
            else {
                self._las.req_pro3.TISSUE_COLLECTION: (
                    LASProcedure.TISSUE_COLLECTION
                ),
                self._las.req_pro3.INDUCTION: (LASProcedure.INDUCTION),
                self._las.req_pro3.DOSING: (LASProcedure.DOSING),
                self._las.req_pro3.RETRO_ORBITAL_INJECTION: (
                    LASProcedure.RETRO_ORBITAL_INJECTION
                ),
                self._las.req_pro3.INTRACEREBROVENTRICULAR: (
                    LASProcedure.IC_INJECTION
                ),
                self._las.req_pro3.BLOOD_COLLECTION: (
                    LASProcedure.BLOOD_COLLECTION
                ),
                self._las.req_pro3.CEREBROSPINAL_FLUID_COL: (
                    LASProcedure.CEREBROSPINAL_FLUID
                ),
                self._las.req_pro3.OTHER: LASProcedure.OTHER,
            }.get(self._las.req_pro3, None)
        )

    @property
    def aind_req_pro4(self) -> Optional[Any]:
        """Maps req_pro4 to aind model."""
        return (
            None
            if self._las.req_pro4 is None
            else {
                self._las.req_pro4.TISSUE_COLLECTION: (
                    LASProcedure.TISSUE_COLLECTION
                ),
                self._las.req_pro4.INDUCTION: (LASProcedure.INDUCTION),
                self._las.req_pro4.DOSING: (LASProcedure.DOSING),
                self._las.req_pro4.RETRO_ORBITAL_INJECTION: (
                    LASProcedure.RETRO_ORBITAL_INJECTION
                ),
                self._las.req_pro4.INTRACEREBROVENTRICULAR: (
                    LASProcedure.IC_INJECTION
                ),
                self._las.req_pro4.BLOOD_COLLECTION: (
                    LASProcedure.BLOOD_COLLECTION
                ),
                self._las.req_pro4.CEREBROSPINAL_FLUID_COL: (
                    LASProcedure.CEREBROSPINAL_FLUID
                ),
                self._las.req_pro4.OTHER: LASProcedure.OTHER,
            }.get(self._las.req_pro4, None)
        )

    @property
    def aind_ro_box1(self) -> Optional[str]:
        """Maps ro_box1 to aind model"""
        return self._las.ro_box1

    @property
    def aind_ro_box2(self) -> Optional[str]:
        """Maps ro_box2 to aind model"""
        return self._las.ro_box2

    @property
    def aind_ro_box3(self) -> Optional[str]:
        """Maps ro_box3 to aind model"""
        return self._las.ro_box3

    @property
    def aind_ro_box4(self) -> Optional[str]:
        """Maps ro_box4 to aind model"""
        return self._las.ro_box4

    @property
    def aind_ro_box5(self) -> Optional[str]:
        """Maps ro_box5 to aind model"""
        return self._las.ro_box5

    @property
    def aind_ro_eye1(self) -> Optional[Any]:
        """Maps ro_eye1 to aind model."""
        return (
            None
            if self._las.ro_eye1 is None
            else {
                self._las.ro_eye1.BEHIND_EITHER: None,
                self._las.ro_eye1.BEHIND_RIGHT: AnatomicalRelative.RIGHT,
                self._las.ro_eye1.BEHIND_LEFT: AnatomicalRelative.LEFT,
            }.get(self._las.ro_eye1, None)
        )

    @property
    def aind_ro_eye2(self) -> Optional[Any]:
        """Maps ro_eye2 to aind model."""
        return (
            None
            if self._las.ro_eye2 is None
            else {
                self._las.ro_eye2.BEHIND_EITHER: None,
                self._las.ro_eye2.BEHIND_RIGHT: AnatomicalRelative.RIGHT,
                self._las.ro_eye2.BEHIND_LEFT: AnatomicalRelative.LEFT,
            }.get(self._las.ro_eye2, None)
        )

    @property
    def aind_ro_eye3(self) -> Optional[Any]:
        """Maps ro_eye3 to aind model."""
        return (
            None
            if self._las.ro_eye3 is None
            else {
                self._las.ro_eye3.BEHIND_EITHER: None,
                self._las.ro_eye3.BEHIND_RIGHT: AnatomicalRelative.RIGHT,
                self._las.ro_eye3.BEHIND_LEFT: AnatomicalRelative.LEFT,
            }.get(self._las.ro_eye3, None)
        )

    @property
    def aind_ro_eye4(self) -> Optional[Any]:
        """Maps ro_eye4 to aind model."""
        return (
            None
            if self._las.ro_eye4 is None
            else {
                self._las.ro_eye4.BEHIND_EITHER: None,
                self._las.ro_eye4.BEHIND_RIGHT: AnatomicalRelative.RIGHT,
                self._las.ro_eye4.BEHIND_LEFT: AnatomicalRelative.LEFT,
            }.get(self._las.ro_eye4, None)
        )

    @property
    def aind_ro_eye5(self) -> Optional[Any]:
        """Maps ro_eye5 to aind model."""
        return (
            None
            if self._las.ro_eye5 is None
            else {
                self._las.ro_eye5.BEHIND_EITHER: None,
                self._las.ro_eye5.BEHIND_RIGHT: AnatomicalRelative.RIGHT,
                self._las.ro_eye5.BEHIND_LEFT: AnatomicalRelative.LEFT,
            }.get(self._las.ro_eye5, None)
        )

    @property
    def aind_ro_gc1(self) -> Optional[str]:
        """Maps ro_gc1 to aind model"""
        return self._las.ro_gc1

    @property
    def aind_ro_gc1b(self) -> Optional[str]:
        """Maps ro_gc1b to aind model"""
        return self._las.ro_gc1b

    @property
    def aind_ro_gc1c(self) -> Optional[str]:
        """Maps ro_gc1c to aind model"""
        return self._las.ro_gc1c

    @property
    def aind_ro_gc1d(self) -> Optional[str]:
        """Maps ro_gc1d to aind model"""
        return self._las.ro_gc1d

    @property
    def aind_ro_gc2(self) -> Optional[str]:
        """Maps ro_gc2 to aind model"""
        return self._las.ro_gc2

    @property
    def aind_ro_gc2b(self) -> Optional[str]:
        """Maps ro_gc2b to aind model"""
        return self._las.ro_gc2b

    @property
    def aind_ro_gc2c(self) -> Optional[str]:
        """Maps ro_gc2c to aind model"""
        return self._las.ro_gc2c

    @property
    def aind_ro_gc2d(self) -> Optional[str]:
        """Maps ro_gc2d to aind model"""
        return self._las.ro_gc2d

    @property
    def aind_ro_gc3(self) -> Optional[str]:
        """Maps ro_gc3 to aind model"""
        return self._las.ro_gc3

    @property
    def aind_ro_gc3b(self) -> Optional[str]:
        """Maps ro_gc3b to aind model"""
        return self._las.ro_gc3b

    @property
    def aind_ro_gc3c(self) -> Optional[str]:
        """Maps ro_gc3c to aind model"""
        return self._las.ro_gc3c

    @property
    def aind_ro_gc3d(self) -> Optional[str]:
        """Maps ro_gc3d to aind model"""
        return self._las.ro_gc3d

    @property
    def aind_ro_gc4(self) -> Optional[str]:
        """Maps ro_gc4 to aind model"""
        return self._las.ro_gc4

    @property
    def aind_ro_gc4b(self) -> Optional[str]:
        """Maps ro_gc4b to aind model"""
        return self._las.ro_gc4b

    @property
    def aind_ro_gc4c(self) -> Optional[str]:
        """Maps ro_gc4c to aind model"""
        return self._las.ro_gc4c

    @property
    def aind_ro_gc4d(self) -> Optional[str]:
        """Maps ro_gc4d to aind model"""
        return self._las.ro_gc4d

    @property
    def aind_ro_gc5(self) -> Optional[str]:
        """Maps ro_gc5 to aind model"""
        return self._las.ro_gc5

    @property
    def aind_ro_gc5b(self) -> Optional[str]:
        """Maps ro_gc5b to aind model"""
        return self._las.ro_gc5b

    @property
    def aind_ro_gc5c(self) -> Optional[str]:
        """Maps ro_gc5c to aind model"""
        return self._las.ro_gc5c

    @property
    def aind_ro_gc5d(self) -> Optional[str]:
        """Maps ro_gc5d to aind model"""
        return self._las.ro_gc5d

    @property
    def aind_ro_lot1(self) -> Optional[str]:
        """Maps ro_lot1 to aind model"""
        return self._las.ro_lot1

    @property
    def aind_ro_lot1b(self) -> Optional[str]:
        """Maps ro_lot1b to aind model"""
        return self._las.ro_lot1b

    @property
    def aind_ro_lot1c(self) -> Optional[str]:
        """Maps ro_lot1c to aind model"""
        return self._las.ro_lot1c

    @property
    def aind_ro_lot1d(self) -> Optional[str]:
        """Maps ro_lot1d to aind model"""
        return self._las.ro_lot1d

    @property
    def aind_ro_lot2(self) -> Optional[str]:
        """Maps ro_lot2 to aind model"""
        return self._las.ro_lot2

    @property
    def aind_ro_lot2b(self) -> Optional[str]:
        """Maps ro_lot2b to aind model"""
        return self._las.ro_lot2b

    @property
    def aind_ro_lot2c(self) -> Optional[str]:
        """Maps ro_lot2c to aind model"""
        return self._las.ro_lot2c

    @property
    def aind_ro_lot2d(self) -> Optional[str]:
        """Maps ro_lot2d to aind model"""
        return self._las.ro_lot2d

    @property
    def aind_ro_lot3(self) -> Optional[str]:
        """Maps ro_lot3 to aind model"""
        return self._las.ro_lot3

    @property
    def aind_ro_lot3b(self) -> Optional[str]:
        """Maps ro_lot3b to aind model"""
        return self._las.ro_lot3b

    @property
    def aind_ro_lot3c(self) -> Optional[str]:
        """Maps ro_lot3c to aind model"""
        return self._las.ro_lot3c

    @property
    def aind_ro_lot3d(self) -> Optional[str]:
        """Maps ro_lot3d to aind model"""
        return self._las.ro_lot3d

    @property
    def aind_ro_lot4(self) -> Optional[str]:
        """Maps ro_lot4 to aind model"""
        return self._las.ro_lot4

    @property
    def aind_ro_lot4b(self) -> Optional[str]:
        """Maps ro_lot4b to aind model"""
        return self._las.ro_lot4b

    @property
    def aind_ro_lot4c(self) -> Optional[str]:
        """Maps ro_lot4c to aind model"""
        return self._las.ro_lot4c

    @property
    def aind_ro_lot4d(self) -> Optional[str]:
        """Maps ro_lot4d to aind model"""
        return self._las.ro_lot4d

    @property
    def aind_ro_lot5(self) -> Optional[str]:
        """Maps ro_lot5 to aind model"""
        return self._las.ro_lot5

    @property
    def aind_ro_lot5b(self) -> Optional[str]:
        """Maps ro_lot5b to aind model"""
        return self._las.ro_lot5b

    @property
    def aind_ro_lot5c(self) -> Optional[str]:
        """Maps ro_lot5c to aind model"""
        return self._las.ro_lot5c

    @property
    def aind_ro_lot5d(self) -> Optional[str]:
        """Maps ro_lot5d to aind model"""
        return self._las.ro_lot5d

    @property
    def aind_ro_sub1(self) -> Optional[str]:
        """Maps ro_sub1 to aind model"""
        return self._las.ro_sub1

    @property
    def aind_ro_sub1b(self) -> Optional[str]:
        """Maps ro_sub1b to aind model"""
        return self._las.ro_sub1b

    @property
    def aind_ro_sub1c(self) -> Optional[str]:
        """Maps ro_sub1c to aind model"""
        return self._las.ro_sub1c

    @property
    def aind_ro_sub1d(self) -> Optional[str]:
        """Maps ro_sub1d to aind model"""
        return self._las.ro_sub1d

    @property
    def aind_ro_sub2(self) -> Optional[str]:
        """Maps ro_sub2 to aind model"""
        return self._las.ro_sub2

    @property
    def aind_ro_sub2b(self) -> Optional[str]:
        """Maps ro_sub2b to aind model"""
        return self._las.ro_sub2b

    @property
    def aind_ro_sub2c(self) -> Optional[str]:
        """Maps ro_sub2c to aind model"""
        return self._las.ro_sub2c

    @property
    def aind_ro_sub2d(self) -> Optional[str]:
        """Maps ro_sub2d to aind model"""
        return self._las.ro_sub2d

    @property
    def aind_ro_sub3(self) -> Optional[str]:
        """Maps ro_sub3 to aind model"""
        return self._las.ro_sub3

    @property
    def aind_ro_sub3b(self) -> Optional[str]:
        """Maps ro_sub3b to aind model"""
        return self._las.ro_sub3b

    @property
    def aind_ro_sub3c(self) -> Optional[str]:
        """Maps ro_sub3c to aind model"""
        return self._las.ro_sub3c

    @property
    def aind_ro_sub3d(self) -> Optional[str]:
        """Maps ro_sub3d to aind model"""
        return self._las.ro_sub3d

    @property
    def aind_ro_sub4(self) -> Optional[str]:
        """Maps ro_sub4 to aind model"""
        return self._las.ro_sub4

    @property
    def aind_ro_sub4b(self) -> Optional[str]:
        """Maps ro_sub4b to aind model"""
        return self._las.ro_sub4b

    @property
    def aind_ro_sub4c(self) -> Optional[str]:
        """Maps ro_sub4c to aind model"""
        return self._las.ro_sub4c

    @property
    def aind_ro_sub4d(self) -> Optional[str]:
        """Maps ro_sub4d to aind model"""
        return self._las.ro_sub4d

    @property
    def aind_ro_sub5(self) -> Optional[str]:
        """Maps ro_sub5 to aind model"""
        return self._las.ro_sub5

    @property
    def aind_ro_sub5b(self) -> Optional[str]:
        """Maps ro_sub5b to aind model"""
        return self._las.ro_sub5b

    @property
    def aind_ro_sub5c(self) -> Optional[str]:
        """Maps ro_sub5c to aind model"""
        return self._las.ro_sub5c

    @property
    def aind_ro_sub5d(self) -> Optional[str]:
        """Maps ro_sub5d to aind model"""
        return self._las.ro_sub5d

    @property
    def aind_ro_tite1(self) -> Optional[str]:
        """Maps ro_tite1 to aind model"""
        return self._las.ro_tite1

    @property
    def aind_ro_tite1b(self) -> Optional[str]:
        """Maps ro_tite1b to aind model"""
        return self._las.ro_tite1b

    @property
    def aind_ro_tite1c(self) -> Optional[str]:
        """Maps ro_tite1c to aind model"""
        return self._las.ro_tite1c

    @property
    def aind_ro_tite1d(self) -> Optional[str]:
        """Maps ro_tite1d to aind model"""
        return self._las.ro_tite1d

    @property
    def aind_ro_tite2(self) -> Optional[str]:
        """Maps ro_tite2 to aind model"""
        return self._las.ro_tite2

    @property
    def aind_ro_tite2b(self) -> Optional[str]:
        """Maps ro_tite2b to aind model"""
        return self._las.ro_tite2b

    @property
    def aind_ro_tite2c(self) -> Optional[str]:
        """Maps ro_tite2c to aind model"""
        return self._las.ro_tite2c

    @property
    def aind_ro_tite2d(self) -> Optional[str]:
        """Maps ro_tite2d to aind model"""
        return self._las.ro_tite2d

    @property
    def aind_ro_tite3(self) -> Optional[str]:
        """Maps ro_tite3 to aind model"""
        return self._las.ro_tite3

    @property
    def aind_ro_tite3b(self) -> Optional[str]:
        """Maps ro_tite3b to aind model"""
        return self._las.ro_tite3b

    @property
    def aind_ro_tite3c(self) -> Optional[str]:
        """Maps ro_tite3c to aind model"""
        return self._las.ro_tite3c

    @property
    def aind_ro_tite3d(self) -> Optional[str]:
        """Maps ro_tite3d to aind model"""
        return self._las.ro_tite3d

    @property
    def aind_ro_tite4(self) -> Optional[str]:
        """Maps ro_tite4 to aind model"""
        return self._las.ro_tite4

    @property
    def aind_ro_tite4b(self) -> Optional[str]:
        """Maps ro_tite4b to aind model"""
        return self._las.ro_tite4b

    @property
    def aind_ro_tite4c(self) -> Optional[str]:
        """Maps ro_tite4c to aind model"""
        return self._las.ro_tite4c

    @property
    def aind_ro_tite4d(self) -> Optional[str]:
        """Maps ro_tite4d to aind model"""
        return self._las.ro_tite4d

    @property
    def aind_ro_tite5(self) -> Optional[str]:
        """Maps ro_tite5 to aind model"""
        return self._las.ro_tite5

    @property
    def aind_ro_tite5b(self) -> Optional[str]:
        """Maps ro_tite5b to aind model"""
        return self._las.ro_tite5b

    @property
    def aind_ro_tite5c(self) -> Optional[str]:
        """Maps ro_tite5c to aind model"""
        return self._las.ro_tite5c

    @property
    def aind_ro_tite5d(self) -> Optional[str]:
        """Maps ro_tite5d to aind model"""
        return self._las.ro_tite5d

    @property
    def aind_ro_tube1(self) -> Optional[str]:
        """Maps ro_tube1 to aind model"""
        return self._las.ro_tube1

    @property
    def aind_ro_tube2(self) -> Optional[str]:
        """Maps ro_tube2 to aind model"""
        return self._las.ro_tube2

    @property
    def aind_ro_tube3(self) -> Optional[str]:
        """Maps ro_tube3 to aind model"""
        return self._las.ro_tube3

    @property
    def aind_ro_tube4(self) -> Optional[str]:
        """Maps ro_tube4 to aind model"""
        return self._las.ro_tube4

    @property
    def aind_ro_tube5(self) -> Optional[str]:
        """Maps ro_tube5 to aind model"""
        return self._las.ro_tube5

    @property
    def aind_ro_vol1(self) -> Optional[Decimal]:
        """Maps ro_vol1 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol1)

    @property
    def aind_ro_vol2(self) -> Optional[Decimal]:
        """Maps ro_vol2 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol2)

    @property
    def aind_ro_vol3(self) -> Optional[Decimal]:
        """Maps ro_vol3 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol3)

    @property
    def aind_ro_vol4(self) -> Optional[Decimal]:
        """Maps ro_vol4 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol4)

    @property
    def aind_ro_vol5(self) -> Optional[Decimal]:
        """Maps ro_vol5 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol5)

    @property
    def aind_ro_vol_v1(self) -> Optional[Decimal]:
        """Maps ro_vol_v1 to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol_v1)

    @property
    def aind_ro_vol_v1b(self) -> Optional[str]:
        """Maps ro_vol_v1b to aind model"""
        return self._parse_basic_decimal_str(self._las.ro_vol_v1b)

    @property
    def aind_ro_vol_v1c(self) -> Optional[str]:
        """Maps ro_vol_v1c to aind model"""
        return self._las.ro_vol_v1c

    @property
    def aind_ro_vol_v1d(self) -> Optional[str]:
        """Maps ro_vol_v1d to aind model"""
        return self._las.ro_vol_v1d

    @property
    def aind_ro_vol_v2(self) -> Optional[str]:
        """Maps ro_vol_v2 to aind model"""
        return self._las.ro_vol_v2

    @property
    def aind_ro_vol_v2b(self) -> Optional[str]:
        """Maps ro_vol_v2b to aind model"""
        return self._las.ro_vol_v2b

    @property
    def aind_ro_vol_v2c(self) -> Optional[str]:
        """Maps ro_vol_v2c to aind model"""
        return self._las.ro_vol_v2c

    @property
    def aind_ro_vol_v2d(self) -> Optional[str]:
        """Maps ro_vol_v2d to aind model"""
        return self._las.ro_vol_v2d

    @property
    def aind_ro_vol_v3(self) -> Optional[str]:
        """Maps ro_vol_v3 to aind model"""
        return self._las.ro_vol_v3

    @property
    def aind_ro_vol_v3b(self) -> Optional[str]:
        """Maps ro_vol_v3b to aind model"""
        return self._las.ro_vol_v3b

    @property
    def aind_ro_vol_v3c(self) -> Optional[str]:
        """Maps ro_vol_v3c to aind model"""
        return self._las.ro_vol_v3c

    @property
    def aind_ro_vol_v3d(self) -> Optional[str]:
        """Maps ro_vol_v3d to aind model"""
        return self._las.ro_vol_v3d

    @property
    def aind_ro_vol_v4(self) -> Optional[str]:
        """Maps ro_vol_v4 to aind model"""
        return self._las.ro_vol_v4

    @property
    def aind_ro_vol_v4b(self) -> Optional[str]:
        """Maps ro_vol_v4b to aind model"""
        return self._las.ro_vol_v4b

    @property
    def aind_ro_vol_v4c(self) -> Optional[str]:
        """Maps ro_vol_v4c to aind model"""
        return self._las.ro_vol_v4c

    @property
    def aind_ro_vol_v4d(self) -> Optional[str]:
        """Maps ro_vol_v4d to aind model"""
        return self._las.ro_vol_v4d

    @property
    def aind_ro_vol_v5(self) -> Optional[str]:
        """Maps ro_vol_v5 to aind model"""
        return self._las.ro_vol_v5

    @property
    def aind_ro_vol_v5b(self) -> Optional[str]:
        """Maps ro_vol_v5b to aind model"""
        return self._las.ro_vol_v5b

    @property
    def aind_ro_vol_v5c(self) -> Optional[str]:
        """Maps ro_vol_v5c to aind model"""
        return self._las.ro_vol_v5c

    @property
    def aind_ro_vol_v5d(self) -> Optional[str]:
        """Maps ro_vol_v5d to aind model"""
        return self._las.ro_vol_v5d

    def has_ip_injection(self) -> bool:
        """Is there an IP injection procedure?"""
        return (
            LASProcedure.DOSING
            in [
                self.aind_req_pro1,
                self.aind_req_pro2,
                self.aind_req_pro3,
                self.aind_req_pro4,
            ]
            and self.aind_dose_route == LASDoseroute.INTRAPERITONEAL_IP
        )

    def has_ro_injection(self) -> bool:
        """Is there a retro-orbital injection?"""
        return LASProcedure.RETRO_ORBITAL_INJECTION in [
            self.aind_req_pro1,
            self.aind_req_pro2,
            self.aind_req_pro3,
            self.aind_req_pro4,
        ]

    def _map_injectable_materials(
        self, material_num: int
    ) -> List[InjectableMaterial]:
        """
        Maps injectable materials based on the material_num.
        Parameters
        ----------
        material_num : int
            The ro injection substance number
        Returns
        -------
            List[InjectableMaterial]
        """
        materials = []
        suffixes = ["", "b", "c", "d"]
        for suffix in suffixes:
            material_attr = f"aind_ro_sub{material_num}{suffix}"
            if getattr(self, material_attr, None):
                materials.append(
                    InjectableMaterial(
                        substance=getattr(self, material_attr),
                        prep_lot_id=getattr(
                            self, f"aind_ro_lot{material_num}{suffix}", None
                        ),
                        genome_copy=getattr(
                            self, f"aind_ro_gc{material_num}{suffix}", None
                        ),
                        titer=getattr(
                            self, f"aind_ro_tite{material_num}{suffix}", None
                        ),
                        virus_volume=getattr(
                            self, f"aind_ro_vol_v{material_num}{suffix}", None
                        ),
                    )
                )
        return materials

    def map_ro_injection_info(self, ro_num: int) -> RetroOrbitalInjectionInfo:
        """
        Compiles retro-orbital injection information from LAS data
        Parameters
        ----------
        ro_num : int
             Retro orbital injection number
        Returns
        -------
        RetroOrbitalInjectionInfo
        class RetroOrbitalInjectionInfo:
        """
        if ro_num == 1:
            return RetroOrbitalInjectionInfo(
                animal_id=self.aind_n_roid1,
                injection_eye=self.aind_ro_eye1,
                injection_volume=self.aind_ro_vol1,
                tube_label=self.aind_ro_tube1,
                box_label=self.aind_ro_box1,
                injectable_materials=self._map_injectable_materials(
                    material_num=1
                ),
            )
        elif ro_num == 2:
            return RetroOrbitalInjectionInfo(
                animal_id=self.aind_n_roid2,
                injection_eye=self.aind_ro_eye2,
                injection_volume=self.aind_ro_vol2,
                tube_label=self.aind_ro_tube2,
                box_label=self.aind_ro_box2,
                injectable_materials=self._map_injectable_materials(
                    material_num=2
                ),
            )
        elif ro_num == 3:
            return RetroOrbitalInjectionInfo(
                animal_id=self.aind_n_roid3,
                injection_eye=self.aind_ro_eye3,
                injection_volume=self.aind_ro_vol3,
                tube_label=self.aind_ro_tube3,
                box_label=self.aind_ro_box3,
                injectable_materials=self._map_injectable_materials(
                    material_num=3
                ),
            )
        elif ro_num == 4:
            return RetroOrbitalInjectionInfo(
                animal_id=self.aind_n_roid4,
                injection_eye=self.aind_ro_eye4,
                injection_volume=self.aind_ro_vol4,
                tube_label=self.aind_ro_tube4,
                box_label=self.aind_ro_box4,
                injectable_materials=self._map_injectable_materials(
                    material_num=4
                ),
            )
        elif ro_num == 5:
            return RetroOrbitalInjectionInfo(
                animal_id=self.aind_n_roid5,
                injection_eye=self.aind_ro_eye5,
                injection_volume=self.aind_ro_vol5,
                tube_label=self.aind_ro_tube5,
                box_label=self.aind_ro_box5,
                injectable_materials=self._map_injectable_materials(
                    material_num=5
                ),
            )

    def map_viral_materials(
        self, injectable_materials: List[InjectableMaterial]
    ):
        """Maps injectable material to viral material"""
        # TODO: map injectable material info in case tars gets no response
        viral_materials = []
        for material in injectable_materials:
            titer, unit = self._parse_titer(getattr(material, "titer", None))
            viral_materials.append(
                ViralMaterial.model_construct(
                    name=material.prep_lot_id, titer=titer, titer_unit=unit
                )
            )
        return viral_materials

    def get_surgery(self, subject_id) -> Optional[Surgery]:
        """Return Surgery as best as possible from a record."""
        procedures = []
        if self.has_ip_injection():
            targeted_structure = InjectionTargets.INTRAPERITONEAL
            injection_materials = (
                [self.aind_dose_sub] if self.aind_dose_sub else []
            )
            try:
                dynamics = InjectionDynamics(
                    profile=InjectionProfile.BOLUS,
                    volume=self.aind_dosevolume,
                    volume_unit=VolumeUnit.UL,
                    duration=self.aind_doseduration,
                )
            except ValidationError:
                dynamics = InjectionDynamics.model_construct(
                    profile=InjectionProfile.BOLUS,
                    volume=self.aind_dosevolume,
                    volume_unit=VolumeUnit.UL,
                    duration=self.aind_doseduration,
                )
            # Source is missing for injection materials
            ip_injection = Injection.model_construct(
                targeted_structure=InjectionTargets.INTRAPERITONEAL,
                injection_materials=injection_materials,
                dynamics=[dynamics],
            )
            procedures.append(ip_injection)
        if self.has_ro_injection():
            # Check if there are ro injections in 1 thorugh 5
            for ro_num in range(1, 6):
                ro_info = self.map_ro_injection_info(ro_num=ro_num)
                if ro_info.animal_id == subject_id:
                    injection_materials = self.map_viral_materials(
                        injectable_materials=ro_info.injectable_materials
                    )
                    targeted_structure = InjectionTargets.RETRO_ORBITAL
                    try:
                        dynamics = InjectionDynamics(
                            profile=InjectionProfile.BOLUS,
                            volume=ro_info.injection_volume,
                            volume_unit=VolumeUnit.UL,
                        )
                        ro_injection = Injection(
                            targeted_structure=targeted_structure,
                            dynamics=[dynamics],
                            relative_position=(
                                [ro_info.injection_eye]
                                if ro_info.injection_eye
                                else None
                            ),
                            injection_materials=injection_materials,
                        )
                    except ValidationError:
                        dynamics = InjectionDynamics.model_construct(
                            profile=InjectionProfile.BOLUS,
                            volume=ro_info.injection_volume,
                            volume_unit=VolumeUnit.UL,
                        )
                        ro_injection = Injection.model_construct(
                            targeted_structure=targeted_structure,
                            dynamics=[dynamics],
                            relative_position=(
                                [ro_info.injection_eye]
                                if ro_info.injection_eye
                                else None
                            ),
                            injection_materials=injection_materials,
                        )
                    procedures.append(ro_injection)
        if procedures:
            name = (
                self.aind_author_id
                if self.aind_author_id
                else self.aind_author_lookup_id
            )
            try:
                return Surgery(
                    experimenters=[name],
                    ethics_review_id=self.aind_protocol,
                    start_date=self.aind_n_start_date,
                    procedures=procedures,
                )
            except ValidationError:
                return Surgery.model_construct(
                    experimenters=[name],
                    ethics_review_id=self.aind_protocol,
                    start_date=self.aind_n_start_date,
                    procedures=procedures,
                )
        else:
            return None
