"""Module template was autogenerated from sharepoint list schema."""

import re
from dataclasses import dataclass
from datetime import date, datetime
from decimal import Decimal, DecimalException
from enum import Enum
from typing import List, Optional, Union, Dict
from pydantic import ValidationError

from aind_data_schema.components.devices import FiberProbe
from aind_data_schema.components.subject_procedures import Surgery, Anaesthetic
from aind_data_schema.components.surgery_procedures import (
    BrainInjection,
    Craniotomy,
    CraniotomyType,
    ProbeImplant,
    Headframe,
)
from aind_data_schema.components.injection_procedures import (
    ViralMaterial,
    NonViralMaterial,
    InjectionDynamics,
    InjectionProfile,
)
from aind_data_schema.components.coordinates import (
    CoordinateSystemLibrary,
    CoordinateSystem,
    Translation,
    Rotation,
    Axis,
    AxisName,
    Direction
)
from aind_data_schema_models.units import (
    SizeUnit,
    VolumeUnit,
    TimeUnit,
    CurrentUnit,
    AngleUnit,
)
from aind_data_schema_models.brain_atlas import CCFv3
from aind_data_schema.components.configs import ProbeConfig
from aind_data_schema_models.mouse_anatomy import InjectionTargets
from aind_data_schema_models.coordinates import AnatomicalRelative, Origin
from aind_data_schema.components.subjects import Sex
from aind_sharepoint_service_async_client.models import (
    NSB2019List,
    NSB2019Procedure,
)


@dataclass
class HeadPostInfo:
    """Container for head post information"""

    headframe_type: Optional[str] = None
    headframe_part_number: Optional[str] = None
    well_type: Optional[str] = None
    well_part_number: Optional[str] = None

class InjectionRound(Enum):
    """Enum class for Injection Rounds"""

    FIRST = "First"
    SECOND = "Second"

class InjectionType(Enum):
    """Enum class for Injection Types"""

    NANOJECT = "Nanoject"
    IONTOPHORESIS = "Iontophoresis"


class MappedNSBList:
    """Mapped Fields in Sharepoint list"""

    AP_REGEX = re.compile(r"^ *([-+]?\d*\.?\d+) *(?:mm)? *$")
    DV_REGEX = re.compile(r"^ *([-+]?\d*\.?\d+) *(?:mm)? *$")
    ISO_DUR_REGEX1 = re.compile(r"^ *(\d*\.?\d+) *(?:hour|hours)* *$")
    ISO_DUR_REGEX2 = re.compile(r"^(\d+):(\d+)$")
    ML_REGEX = re.compile(r"^ *([-+]?\d*\.?\d+) *(?:mm)? *$")
    ALT_TIME_REGEX = re.compile(
        r"^ *(7)(?:.0|/7)? *(?:s|sec|secs|second|seconds)? *$"
    )
    INJ_ANGLE_REGEX = re.compile(
        r"^ *([-+]?\d*\.?\d+) *(?:deg|degree|degrees)* *$"
    )
    CURRENT_REGEX = re.compile(r"^ *([-+]?\d*\.?\d+) *(?:ua|uA|uAmp)* *$")
    LENGTH_OF_TIME_REGEX = re.compile(
        r"^ *(\d*\.?\d+) *(?:m|min|mins|minute|minutes)+ *$"
    )
    VOLUME_REGEX = re.compile(r"^ *(\d*\.?\d+) *(?:nl|nL)+ *$")

    def __init__(self, nsb: NSB2019List):
        """Class constructor"""
        self._nsb = nsb

    @staticmethod
    def _parse_basic_decimal_str(value: Optional[str]) -> Optional[Decimal]:
        """Parse string representation of Decimal such as '0.25'."""
        try:
            return None if value is None else Decimal(value)
        except (ValueError, DecimalException):
            return None

    @staticmethod
    def _parse_basic_float_str(float_str: Optional[str]) -> Optional[float]:
        """Parse string representation of float such as '0.25'."""
        try:
            return None if float_str is None else float(float_str)
        except ValueError:
            return None

    def _parse_ap_str(self, ap_str: Optional[str]) -> Optional[Decimal]:
        """Parse AP String."""
        if ap_str is not None:
            parsed_string = re.search(self.AP_REGEX, ap_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_dv_str(self, dv_str: Optional[str]) -> Optional[Decimal]:
        """Parse dv String"""
        if dv_str is not None:
            parsed_string = re.search(self.DV_REGEX, dv_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_ml_str(self, ml_str: Optional[str]) -> Optional[Decimal]:
        """Parse ml string"""
        if ml_str is not None:
            parsed_string = re.search(self.ML_REGEX, ml_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_iso_dur_str(self, iso_str: Optional[str]) -> Optional[Decimal]:
        """Parse iso duration strings"""
        if iso_str is None:
            return None
        parsed_string1 = re.search(self.ISO_DUR_REGEX1, iso_str)
        if parsed_string1 is None:
            parsed_string2 = re.search(self.ISO_DUR_REGEX2, iso_str)
            if parsed_string2 is None:
                return None
            else:
                hours = self._parse_basic_decimal_str(parsed_string2.group(1))
                minutes = self._parse_basic_decimal_str(
                    parsed_string2.group(2)
                )
                if hours is not None and minutes is not None and hours < 5.0:
                    return 60 * hours + minutes
                else:
                    return None
        else:
            hours = self._parse_basic_decimal_str(parsed_string1.group(1))
            if hours is not None and hours < 5.0:
                return 60 * hours
            else:
                return None

    def _parse_weight_str(
        self, weight_str: Optional[str]
    ) -> Optional[Decimal]:
        """Parse weight strings"""
        # Most entries are recorded as simple floats. There are some outliers.
        # But we can map those to None for the time being.
        parsed_weight = self._parse_basic_decimal_str(weight_str)
        if parsed_weight is not None and parsed_weight < 1000:
            return parsed_weight
        else:
            return None

    def _parse_alt_time_str(
        self, alt_time_str: Optional[str]
    ) -> Optional[Decimal]:
        """Parse alternating time strings"""
        if alt_time_str is not None:
            parsed_string = re.search(self.ALT_TIME_REGEX, alt_time_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_angle_str(
        self, inj_ang_str: Optional[str]
    ) -> Optional[Decimal]:
        """Parse angle strings"""
        if inj_ang_str is not None:
            parsed_string = re.search(self.INJ_ANGLE_REGEX, inj_ang_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_current_str(self, cur_str: Optional[str]) -> Optional[Decimal]:
        """Parse current strings"""
        if cur_str is not None:
            parsed_string = re.search(self.CURRENT_REGEX, cur_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    def _parse_length_of_time_str(
        self, len_of_time_str: Optional[str]
    ) -> Optional[Decimal]:
        """Parse length of time strings"""
        if len_of_time_str is not None:
            parsed_string = re.search(
                self.LENGTH_OF_TIME_REGEX, len_of_time_str
            )
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    @staticmethod
    def _parse_virus_strain_str(_: Optional[str]) -> Optional[str]:
        """Parse virus strain strings"""
        # TODO: Figure out how to parse virus strain fields
        return None

    def _parse_inj_vol_str(self, vol_str: Optional[str]) -> Optional[Decimal]:
        """Parse injection volume strings"""
        if vol_str is not None:
            parsed_string = re.search(self.VOLUME_REGEX, vol_str)
            if parsed_string is not None:
                return self._parse_basic_decimal_str(parsed_string.group(1))
            else:
                return None
        else:
            return None

    @staticmethod
    def _parse_datetime_to_date(dt: Optional[datetime]) -> Optional[date]:
        """Parse date from datetime"""
        return None if dt is None else dt.date()

    @property
    def aind_age_at_injection(self) -> Optional[str]:
        """Maps age_at_injection to aind model"""
        return self._nsb.age_x0020_at_x0020_injection

    @property
    def aind_ap2nd_inj(self) -> Optional[Decimal]:
        """Maps ap2nd_inj to aind model"""
        return self._parse_ap_str(self._nsb.ap2nd_inj)

    @property
    def aind_author_id(self) -> Optional[int]:
        """Maps author_id to aind model"""
        return self._nsb.author_id

    @property
    def aind_breg2_lamb(self) -> Optional[Decimal]:
        """Maps breg2_lamb to aind model"""
        parsed = self._parse_basic_decimal_str(self._nsb.breg2_lamb)
        return abs(parsed) if parsed else None

    @property
    def aind_craniotomy_type(self) -> Optional[CraniotomyType]:
        """Maps craniotomy_type to aind model"""
        return (
            CraniotomyType.OTHER
            if self._nsb.craniotomy_type is None
            else {
                self._nsb.craniotomy_type.SELECT: CraniotomyType.OTHER,
                self._nsb.craniotomy_type.VISUAL_CORTEX_5MM: (
                    CraniotomyType.CIRCLE
                ),
                self._nsb.craniotomy_type.FRONTAL_WINDOW_3MM: (
                    CraniotomyType.CIRCLE
                ),
                self._nsb.craniotomy_type.WHC_NP: CraniotomyType.WHC,
                self._nsb.craniotomy_type.WHC_2_P: CraniotomyType.WHC,
            }.get(self._nsb.craniotomy_type, CraniotomyType.OTHER)
        )

    @property
    def aind_date1st_injection(self) -> Optional[date]:
        """Maps date1st_injection to aind model"""
        return self._parse_datetime_to_date(self._nsb.date1st_injection)

    @property
    def aind_date2nd_injection(self) -> Optional[date]:
        """Maps date2nd_injection to aind model"""
        return self._parse_datetime_to_date(self._nsb.date2nd_injection)

    @property
    def aind_date_of_surgery(self) -> Optional[date]:
        """Maps date_of_surgery to aind model"""
        return self._parse_datetime_to_date(
            self._nsb.date_x0020_of_x0020_surgery
        )

    @property
    def aind_dv2nd_inj(self) -> Optional[Decimal]:
        """Maps dv2nd_inj to aind model"""
        return self._parse_dv_str(self._nsb.dv2nd_inj)

    @property
    def aind_fiber_implant1(self) -> Optional[bool]:
        """Maps fiber_implant1 to aind model"""
        return self._nsb.fiber_implant1

    @property
    def aind_fiber_implant1_dv(self) -> Optional[Decimal]:
        """Maps fiber_implant1_dv to aind model"""
        return self._parse_dv_str(self._nsb.fiber_implant1_dv)

    @property
    def aind_fiber_implant2(self) -> Optional[bool]:
        """Maps fiber_implant2 to aind model"""
        return self._nsb.fiber_implant2

    @property
    def aind_fiber_implant2_dv(self) -> Optional[Decimal]:
        """Maps fiber_implant2_dv to aind model"""
        return self._parse_dv_str(self._nsb.fiber_implant2_dv)

    @property
    def aind_first_inj_recovery(self) -> Optional[Decimal]:
        """Maps first_inj_recovery to aind model"""
        opt_float = self._nsb.first_inj_recovery
        return None if opt_float is None else Decimal(opt_float)

    @property
    def aind_first_injection_iso_durat(self) -> Optional[Decimal]:
        """Maps first_injection_iso_durat to aind model"""
        return self._parse_iso_dur_str(self._nsb.first_injection_iso_duration)

    @property
    def aind_first_injection_weight_af(self) -> Optional[Decimal]:
        """Maps first_injection_weight_af to aind model"""
        return self._parse_weight_str(self._nsb.first_injection_weight_after)

    @property
    def aind_first_injection_weight_be(self) -> Optional[Decimal]:
        """Maps first_injection_weight_be to aind model"""
        return self._parse_weight_str(self._nsb.first_injection_weight_befor)

    @property
    def aind_headpost_type(self) -> HeadPostInfo:
        """Maps headpost_type to aind model"""
        return (
            HeadPostInfo()
            if self._nsb.headpost_type is None
            else {
                self._nsb.headpost_type.SELECT: HeadPostInfo(),
                self._nsb.headpost_type.CAMSTYLE_HEADFRAME_016010: (
                    HeadPostInfo(
                        headframe_type="CAM-style",
                        headframe_part_number="0160-100-10 Rev A",
                        well_type="CAM-style",
                    )
                ),
                self._nsb.headpost_type.NEUROPIXELSTYLE_HEADFRAME: (
                    HeadPostInfo(
                        headframe_type="Neuropixel-style",
                        headframe_part_number="0160-100-10",
                        well_type="Neuropixel-style",
                        well_part_number="0160-200-36",
                    )
                ),
                self._nsb.headpost_type.MESOSCOPESTYLE_WELL_WITH: (
                    HeadPostInfo(
                        headframe_type="NGC-style",
                        headframe_part_number="0160-100-10",
                        well_type="Mesoscope-style",
                        well_part_number="0160-200-20",
                    )
                ),
                self._nsb.headpost_type.WHC_42_WITH_NEUROPIXEL_WE: (
                    HeadPostInfo(
                        headframe_type="WHC #42",
                        headframe_part_number="42",
                        well_type="Neuropixel-style",
                        well_part_number="0160-200-36",
                    )
                ),
                self._nsb.headpost_type.NGCSTYLE_HEADFRAME_NO_WEL: (
                    HeadPostInfo(
                        headframe_type="NGC-style",
                        headframe_part_number="0160-100-10",
                    )
                ),
                self._nsb.headpost_type.AI_STRAIGHT_HEADBAR: (
                    HeadPostInfo(headframe_type="AI Straight Headbar")
                ),
            }.get(self._nsb.headpost_type, HeadPostInfo())
        )

    @property
    def aind_hemisphere2nd_inj(self) -> Optional[AnatomicalRelative]:
        """Maps hemisphere2nd_inj to aind model"""
        return (
            None
            if self._nsb.hemisphere2nd_inj is None
            else {
                self._nsb.hemisphere2nd_inj.SELECT: None,
                self._nsb.hemisphere2nd_inj.LEFT: AnatomicalRelative.LEFT,
                self._nsb.hemisphere2nd_inj.RIGHT: AnatomicalRelative.RIGHT,
            }.get(self._nsb.hemisphere2nd_inj, None)
        )

    @property
    def aind_hp_a_p(self) -> Optional[Decimal]:
        """Maps hp_a_p to aind model"""
        return self._parse_ap_str(self._nsb.hp_x0020_a_x002f_p)

    @property
    def aind_hp_diameter(self) -> Optional[str]:
        """Maps hp_diameter to aind model"""
        return self._nsb.hp_x0020_diameter

    @property
    def aind_hp_durotomy(self) -> Optional[bool]:
        """Maps hp_durotomy to aind model"""
        return {
            self._nsb.hp_durotomy.SELECT: None,
            self._nsb.hp_durotomy.YES: True,
            self._nsb.hp_durotomy.NO: False,
        }.get(self._nsb.hp_durotomy, None)

    @property
    def aind_hp_inj(self) -> Optional[bool]:
        """Maps hp_inj to aind model"""
        return (
            True
            if self._nsb.hp_x0020__x0026__x0020_inj is not None
            and self._nsb.hp_x0020__x0026__x0020_inj == "Yes"
            else False
        )

    @property
    def aind_hp_iso_level(self) -> Optional[Decimal]:
        """Maps hp_iso_level to aind model"""
        return (
            None
            if self._nsb.hp_iso_level is None
            else {
                self._nsb.hp_iso_level.SELECT: None,
                self._nsb.hp_iso_level.N_025: Decimal(0.25),
                self._nsb.hp_iso_level.N_050: Decimal(0.50),
                self._nsb.hp_iso_level.N_075: Decimal(0.75),
                self._nsb.hp_iso_level.N_100: Decimal(1.00),
                self._nsb.hp_iso_level.N_125: Decimal(1.25),
                self._nsb.hp_iso_level.N_15: Decimal(1.5),
                self._nsb.hp_iso_level.N_175: Decimal(1.75),
                self._nsb.hp_iso_level.N_200: Decimal(2.00),
                self._nsb.hp_iso_level.N_225: Decimal(2.25),
                self._nsb.hp_iso_level.N_250: Decimal(2.50),
                self._nsb.hp_iso_level.N_275: Decimal(2.75),
                self._nsb.hp_iso_level.N_300: None,
            }.get(self._nsb.hp_iso_level, None)
        )

    @property
    def aind_hp_loc(self) -> Optional[AnatomicalRelative]:
        """Maps hp_loc to aind model"""
        return (
            None
            if self._nsb.hp_loc is None
            else {
                self._nsb.hp_loc.SELECT: None,
                self._nsb.hp_loc.LEFT: AnatomicalRelative.LEFT,
                self._nsb.hp_loc.CENTER: None,
                self._nsb.hp_loc.RIGHT: AnatomicalRelative.RIGHT,
            }.get(self._nsb.hp_loc, None)
        )

    @property
    def aind_hp_m_l(self) -> Optional[Decimal]:
        """Maps hp_m_l to aind model"""
        return self._parse_ml_str(self._nsb.hp_x0020_m_x002f_l)

    @property
    def aind_hp_recovery(self) -> Optional[float]:
        """Maps hp_recovery to aind model"""
        opt_float = self._nsb.hp_recovery
        return None if opt_float is None else Decimal(self._nsb.hp_recovery)

    @property
    def aind_hp_work_station(self) -> Optional[str]:
        """Maps hp_work_station to aind model"""
        return (
            None
            if self._nsb.hp_work_station is None
            else {
                self._nsb.hp_work_station.SELECT: None,
                self._nsb.hp_work_station.SWS_1: (
                    self._nsb.hp_work_station.SWS_1.value
                ),
                self._nsb.hp_work_station.SWS_2: (
                    self._nsb.hp_work_station.SWS_2.value
                ),
                self._nsb.hp_work_station.SWS_3: (
                    self._nsb.hp_work_station.SWS_3.value
                ),
                self._nsb.hp_work_station.SWS_4: (
                    self._nsb.hp_work_station.SWS_4.value
                ),
                self._nsb.hp_work_station.SWS_5: (
                    self._nsb.hp_work_station.SWS_5.value
                ),
                self._nsb.hp_work_station.SWS_6: (
                    self._nsb.hp_work_station.SWS_6.value
                ),
                self._nsb.hp_work_station.SWS_7: (
                    self._nsb.hp_work_station.SWS_7.value
                ),
                self._nsb.hp_work_station.SWS_8: (
                    self._nsb.hp_work_station.SWS_8.value
                ),
                self._nsb.hp_work_station.SWS_9: (
                    self._nsb.hp_work_station.SWS_9.value
                ),
            }.get(self._nsb.hp_work_station, None)
        )

    @property
    def aind_iacuc_protocol(self) -> Optional[str]:
        """Maps iacuc_protocol to aind model"""
        return (
            None
            if self._nsb.iacuc_x0020_protocol_x0020__x002 is None
            else {
                self._nsb.iacuc_x0020_protocol_x0020__x002.SELECT: None,
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2001: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2001.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2002: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2002.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2003: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2003.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2004: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2004.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2005: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2005.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2006: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2006.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2011: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2011.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2102: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2102.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2103: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2103.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2104: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2104.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2105: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2105.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2106: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2106.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2107: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2107.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2108: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2108.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2109: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2109.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2110: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2110.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2113: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2113.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2115: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2115.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2117: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2117.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2201: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2201.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2202: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2202.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2205: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2205.value
                ),
                self._nsb.iacuc_x0020_protocol_x0020__x002.N_2212: (
                    self._nsb.iacuc_x0020_protocol_x0020__x002.N_2212.value
                ),
            }.get(self._nsb.iacuc_x0020_protocol_x0020__x002, None)
        )

    @property
    def aind_inj1_alternating_time(self) -> Optional[str]:
        """Maps inj1_alternating_time to aind model"""
        return self._nsb.inj1_alternating_time

    @property
    def aind_inj1_angle_v2(self) -> Optional[Decimal]:
        """Maps inj1_angle_v2 to aind model"""
        return self._parse_angle_str(self._nsb.inj1_angle_v2)

    @property
    def aind_inj1_current(self) -> Optional[Decimal]:
        """Maps inj1_current to aind model"""
        return self._parse_current_str(self._nsb.inj1_current)

    @property
    def aind_inj1_lenghtof_time(self) -> Optional[Decimal]:
        """Maps inj1_lenghtof_time to aind model"""
        return self._parse_length_of_time_str(self._nsb.inj1_lenghtof_time)

    @property
    def aind_inj1_type(self) -> Optional[InjectionType]:
        """Maps inj1_type to aind model"""
        return (
            None
            if self._nsb.inj1_type is None
            else {
                self._nsb.inj1_type.SELECT: None,
                self._nsb.inj1_type.IONTOPHORESIS: InjectionType.IONTOPHORESIS,
                self._nsb.inj1_type.NANOJECT_PRESSURE: InjectionType.NANOJECT,
            }.get(self._nsb.inj1_type, None)
        )

    @property
    def aind_inj1_virus_strain_rt(self) -> Optional[str]:
        """Maps inj1_virus_strain_rt to aind model"""
        return self._parse_virus_strain_str(self._nsb.inj1_virus_strain_rt)

    @property
    def aind_inj1_vol(self) -> Optional[List[Decimal]]:
        """Maps inj1_vol to aind model"""
        vol = self._parse_inj_vol_str(self._nsb.inj1_vol)
        return None if vol is None else [vol]

    @property
    def aind_inj1angle0(self) -> Optional[Decimal]:
        """Maps inj1angle0 to aind model"""
        return (
            None
            if self._nsb.inj1angle0 is None
            else {
                self._nsb.inj1angle0.SELECT: None,
                self._nsb.inj1angle0.N_0_DEGREES: Decimal(0),
                self._nsb.inj1angle0.N_10_DEGREES: Decimal(10),
                self._nsb.inj1angle0.N_15_DEGREES: Decimal(15),
                self._nsb.inj1angle0.N_20_DEGREES: Decimal(20),
                self._nsb.inj1angle0.N_30_DEGREES: Decimal(30),
                self._nsb.inj1angle0.N_40_DEGREES: Decimal(40),
            }.get(self._nsb.inj1angle0, None)
        )

    @property
    def aind_inj1volperdepth(self) -> Optional[List[Decimal]]:
        """Maps inj1volperdepth to aind model"""
        volperdepth = self._parse_inj_vol_str(self._nsb.inj1volperdepth)
        return None if volperdepth is None else [volperdepth]

    @property
    def aind_inj2_alternating_time(self) -> Optional[str]:
        """Maps inj2_alternating_time to aind model"""
        return self._nsb.inj2_alternating_time

    @property
    def aind_inj2_angle_v2(self) -> Optional[Decimal]:
        """Maps inj2_angle_v2 to aind model"""
        return self._parse_angle_str(self._nsb.inj2_angle_v2)

    @property
    def aind_inj2_current(self) -> Optional[Decimal]:
        """Maps inj2_current to aind model"""
        return self._parse_current_str(self._nsb.inj2_current)

    @property
    def aind_inj2_lenghtof_time(self) -> Optional[Decimal]:
        """Maps inj2_lenghtof_time to aind model"""
        return self._parse_length_of_time_str(self._nsb.inj2_lenghtof_time)
    
    @property
    def aind_inj2_round(self) -> Optional[InjectionRound]:
        """Maps inj2_round to aind model"""
        return (
            None
            if self._nsb.inj2_round is None
            else {
                self._nsb.inj2_round.SELECT: None,
                self._nsb.inj2_round.N_1ST: InjectionRound.FIRST,
                self._nsb.inj2_round.N_2ND: InjectionRound.SECOND,
                self._nsb.inj2_round.NA: None,
            }.get(self._nsb.inj2_round, None)
        )

    @property
    def aind_inj2_storage_location(self) -> Optional[str]:
        """Maps inj2_storage_location to aind model"""
        return self._nsb.inj2_storage_location

    @property
    def aind_inj2_type(self) -> Optional[InjectionType]:
        """Maps inj2_type to aind model"""
        return (
            None
            if self._nsb.inj2_type is None
            else {
                self._nsb.inj2_type.SELECT: None,
                self._nsb.inj2_type.IONTOPHORESIS: InjectionType.IONTOPHORESIS,
                self._nsb.inj2_type.NANOJECT_PRESSURE: InjectionType.NANOJECT,
            }.get(self._nsb.inj2_type, None)
        )

    @property
    def aind_inj2_virus_strain_rt(self) -> Optional[str]:
        """Maps inj2_virus_strain_rt to aind model"""
        return self._parse_virus_strain_str(self._nsb.inj2_virus_strain_rt)

    @property
    def aind_inj2_vol(self) -> Optional[List[Decimal]]:
        """Maps inj2_vol to aind model"""
        vol = self._parse_inj_vol_str(self._nsb.inj2_vol)
        return None if vol is None else [vol]

    @property
    def aind_inj2angle0(self) -> Optional[Decimal]:
        """Maps inj2angle0 to aind model"""
        return (
            None
            if self._nsb.inj2angle0 is None
            else {
                self._nsb.inj2angle0.SELECT: None,
                self._nsb.inj2angle0.N_0_DEGREES: Decimal(0),
                self._nsb.inj2angle0.N_10_DEGREES: Decimal(10),
                self._nsb.inj2angle0.N_15_DEGREES: Decimal(15),
                self._nsb.inj2angle0.N_20_DEGREES: Decimal(20),
                self._nsb.inj2angle0.N_30_DEGREES: Decimal(30),
                self._nsb.inj2angle0.N_40_DEGREES: Decimal(40),
            }.get(self._nsb.inj2angle0, None)
        )

    @property
    def aind_inj2volperdepth(self) -> Optional[List[Decimal]]:
        """Maps inj2volperdepth to aind model"""
        volperdepth = self._parse_inj_vol_str(self._nsb.inj2volperdepth)
        return None if volperdepth is None else [volperdepth]

    @property
    def aind_ionto_number_hpinj(self) -> Optional[str]:
        """Maps ionto_number_hpinj to aind model"""
        return (
            None
            if self._nsb.ionto_number_hpinj is None
            else {
                self._nsb.ionto_number_hpinj.IONTO_1: (
                    self._nsb.ionto_number_hpinj.IONTO_1.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_2: (
                    self._nsb.ionto_number_hpinj.IONTO_2.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_3: (
                    self._nsb.ionto_number_hpinj.IONTO_3.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_4: (
                    self._nsb.ionto_number_hpinj.IONTO_4.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_5: (
                    self._nsb.ionto_number_hpinj.IONTO_5.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_6: (
                    self._nsb.ionto_number_hpinj.IONTO_6.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_7: (
                    self._nsb.ionto_number_hpinj.IONTO_7.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_8: (
                    self._nsb.ionto_number_hpinj.IONTO_8.value
                ),
                self._nsb.ionto_number_hpinj.IONTO_9: (
                    self._nsb.ionto_number_hpinj.IONTO_9.value
                ),
            }.get(self._nsb.ionto_number_hpinj, None)
        )

    @property
    def aind_ionto_number_inj1(self) -> Optional[str]:
        """Maps ionto_number_inj1 to aind model"""
        return (
            None
            if self._nsb.ionto_number_inj1 is None
            else {
                self._nsb.ionto_number_inj1.SELECT: None,
                self._nsb.ionto_number_inj1.IONTO_1: (
                    self._nsb.ionto_number_inj1.IONTO_1.value
                ),
                self._nsb.ionto_number_inj1.IONTO_2: (
                    self._nsb.ionto_number_inj1.IONTO_2.value
                ),
                self._nsb.ionto_number_inj1.IONTO_3: (
                    self._nsb.ionto_number_inj1.IONTO_3.value
                ),
                self._nsb.ionto_number_inj1.IONTO_4: (
                    self._nsb.ionto_number_inj1.IONTO_4.value
                ),
                self._nsb.ionto_number_inj1.IONTO_5: (
                    self._nsb.ionto_number_inj1.IONTO_5.value
                ),
                self._nsb.ionto_number_inj1.IONTO_6: (
                    self._nsb.ionto_number_inj1.IONTO_6.value
                ),
                self._nsb.ionto_number_inj1.IONTO_7: (
                    self._nsb.ionto_number_inj1.IONTO_7.value
                ),
                self._nsb.ionto_number_inj1.IONTO_8: (
                    self._nsb.ionto_number_inj1.IONTO_8.value
                ),
                self._nsb.ionto_number_inj1.IONTO_9: (
                    self._nsb.ionto_number_inj1.IONTO_9.value
                ),
                self._nsb.ionto_number_inj1.IONTO_10: (
                    self._nsb.ionto_number_inj1.IONTO_10.value
                ),
                self._nsb.ionto_number_inj1.NA: None,
            }.get(self._nsb.ionto_number_inj1, None)
        )

    @property
    def aind_ionto_number_inj2(self) -> Optional[str]:
        """Maps ionto_number_inj2 to aind model"""
        return (
            None
            if self._nsb.ionto_number_inj2 is None
            else {
                self._nsb.ionto_number_inj2.SELECT: None,
                self._nsb.ionto_number_inj2.IONTO_1: (
                    self._nsb.ionto_number_inj2.IONTO_1.value
                ),
                self._nsb.ionto_number_inj2.IONTO_2: (
                    self._nsb.ionto_number_inj2.IONTO_2.value
                ),
                self._nsb.ionto_number_inj2.IONTO_3: (
                    self._nsb.ionto_number_inj2.IONTO_3.value
                ),
                self._nsb.ionto_number_inj2.IONTO_4: (
                    self._nsb.ionto_number_inj2.IONTO_4.value
                ),
                self._nsb.ionto_number_inj2.IONTO_5: (
                    self._nsb.ionto_number_inj2.IONTO_5.value
                ),
                self._nsb.ionto_number_inj2.IONTO_6: (
                    self._nsb.ionto_number_inj2.IONTO_6.value
                ),
                self._nsb.ionto_number_inj2.IONTO_7: (
                    self._nsb.ionto_number_inj2.IONTO_7.value
                ),
                self._nsb.ionto_number_inj2.IONTO_8: (
                    self._nsb.ionto_number_inj2.IONTO_8.value
                ),
                self._nsb.ionto_number_inj2.IONTO_9: (
                    self._nsb.ionto_number_inj2.IONTO_9.value
                ),
                self._nsb.ionto_number_inj2.IONTO_10: (
                    self._nsb.ionto_number_inj2.IONTO_10.value
                ),
                self._nsb.ionto_number_inj2.NA: None,
            }.get(self._nsb.ionto_number_inj2, None)
        )

    @property
    def aind_lab_tracks_id(self) -> Optional[str]:
        """Maps lab_tracks_id to aind model"""
        return self._nsb.lab_tracks_x0020_id

    @property
    def aind_ml2nd_inj(self) -> Optional[Decimal]:
        """Maps ml2nd_inj to aind model"""
        return self._parse_ml_str(self._nsb.ml2nd_inj)

    @property
    def aind_nanoject_number_inj10(self) -> Optional[str]:
        """Maps nanoject_number_inj10 to aind model"""
        return (
            None
            if self._nsb.nanoject_number_inj10 is None
            else {
                self._nsb.nanoject_number_inj10.SELECT: None,
                self._nsb.nanoject_number_inj10.NJ1: (
                    self._nsb.nanoject_number_inj10.NJ1.value
                ),
                self._nsb.nanoject_number_inj10.NJ2: (
                    self._nsb.nanoject_number_inj10.NJ2.value
                ),
                self._nsb.nanoject_number_inj10.NJ3: (
                    self._nsb.nanoject_number_inj10.NJ3.value
                ),
                self._nsb.nanoject_number_inj10.NJ4: (
                    self._nsb.nanoject_number_inj10.NJ4.value
                ),
                self._nsb.nanoject_number_inj10.NJ5: (
                    self._nsb.nanoject_number_inj10.NJ5.value
                ),
                self._nsb.nanoject_number_inj10.NJ6: (
                    self._nsb.nanoject_number_inj10.NJ6.value
                ),
                self._nsb.nanoject_number_inj10.NJ7: (
                    self._nsb.nanoject_number_inj10.NJ7.value
                ),
                self._nsb.nanoject_number_inj10.NJ8: (
                    self._nsb.nanoject_number_inj10.NJ8.value
                ),
                self._nsb.nanoject_number_inj10.NA: None,
            }.get(self._nsb.nanoject_number_inj10, None)
        )

    @property
    def aind_nanoject_number_inj2(self) -> Optional[str]:
        """Maps nanoject_number_inj2 to aind model"""
        return (
            None
            if self._nsb.nanoject_number_inj2 is None
            else {
                self._nsb.nanoject_number_inj2.SELECT: None,
                self._nsb.nanoject_number_inj2.NJ1: (
                    self._nsb.nanoject_number_inj2.NJ1
                ),
                self._nsb.nanoject_number_inj2.NJ2: (
                    self._nsb.nanoject_number_inj2.NJ2
                ),
                self._nsb.nanoject_number_inj2.NJ3: (
                    self._nsb.nanoject_number_inj2.NJ3
                ),
                self._nsb.nanoject_number_inj2.NJ4: (
                    self._nsb.nanoject_number_inj2.NJ4
                ),
                self._nsb.nanoject_number_inj2.NJ5: (
                    self._nsb.nanoject_number_inj2.NJ5
                ),
                self._nsb.nanoject_number_inj2.NJ6: (
                    self._nsb.nanoject_number_inj2.NJ6
                ),
                self._nsb.nanoject_number_inj2.NJ7: (
                    self._nsb.nanoject_number_inj2.NJ7
                ),
                self._nsb.nanoject_number_inj2.NJ8: (
                    self._nsb.nanoject_number_inj2.NJ8
                ),
                self._nsb.nanoject_number_inj2.NA: None,
            }.get(self._nsb.nanoject_number_inj2, None)
        )

    @property
    def aind_procedure(self) -> Optional[NSB2019Procedure]:
        """Maps procedure to aind model"""
        return self._nsb.procedure

    @property
    def aind_round1_inj_isolevel(self) -> Optional[Decimal]:
        """Maps round1_inj_isolevel to aind model"""
        return (
            None
            if self._nsb.round1_inj_isolevel is None
            else {
                self._nsb.round1_inj_isolevel.SELECT: None,
                self._nsb.round1_inj_isolevel.N_025: Decimal(0.25),
                self._nsb.round1_inj_isolevel.N_050: Decimal(0.50),
                self._nsb.round1_inj_isolevel.N_075: Decimal(0.75),
                self._nsb.round1_inj_isolevel.N_100: Decimal(1.00),
                self._nsb.round1_inj_isolevel.N_125: Decimal(1.25),
                self._nsb.round1_inj_isolevel.N_150: Decimal(1.50),
                self._nsb.round1_inj_isolevel.N_175: Decimal(1.75),
                self._nsb.round1_inj_isolevel.N_200: Decimal(2.00),
                self._nsb.round1_inj_isolevel.N_225: Decimal(2.25),
                self._nsb.round1_inj_isolevel.N_250: Decimal(2.50),
                self._nsb.round1_inj_isolevel.N_275: Decimal(2.75),
                self._nsb.round1_inj_isolevel.N_300: None,
            }.get(self._nsb.round1_inj_isolevel, None)
        )

    @property
    def aind_round2_inj_isolevel(self) -> Optional[Decimal]:
        """Maps round2_inj_isolevel to aind model"""
        return (
            None
            if self._nsb.round2_inj_isolevel is None
            else {
                self._nsb.round2_inj_isolevel.SELECT: None,
                self._nsb.round2_inj_isolevel.N_025: Decimal(0.25),
                self._nsb.round2_inj_isolevel.N_050: Decimal(0.50),
                self._nsb.round2_inj_isolevel.N_075: Decimal(0.75),
                self._nsb.round2_inj_isolevel.N_100: Decimal(1.00),
                self._nsb.round2_inj_isolevel.N_125: Decimal(1.25),
                self._nsb.round2_inj_isolevel.N_150: Decimal(1.50),
                self._nsb.round2_inj_isolevel.N_175: Decimal(1.75),
                self._nsb.round2_inj_isolevel.N_200: Decimal(2.00),
                self._nsb.round2_inj_isolevel.N_225: Decimal(2.25),
                self._nsb.round2_inj_isolevel.N_250: Decimal(2.50),
                self._nsb.round2_inj_isolevel.N_275: Decimal(2.75),
                self._nsb.round2_inj_isolevel.N_300: None,
            }.get(self._nsb.round2_inj_isolevel, None)
        )

    @property
    def aind_second_inj_recover(self) -> Optional[Decimal]:
        """Maps second_inj_recover to aind model"""
        opt_float = self._nsb.second_inj_recover
        return (
            None
            if opt_float is None
            else Decimal(self._nsb.second_inj_recover)
        )

    @property
    def aind_second_injection_iso_dura(self) -> Optional[Decimal]:
        """Maps second_injection_iso_dura to aind model"""
        return self._parse_iso_dur_str(self._nsb.second_injection_iso_duration)

    @property
    def aind_second_injection_weight_a(self) -> Optional[Decimal]:
        """Maps second_injection_weight_a to aind model"""
        return self._parse_weight_str(self._nsb.second_injection_weight_after)

    @property
    def aind_second_injection_weight_b(self) -> Optional[Decimal]:
        """Maps second_injection_weight_b to aind model"""
        return self._parse_weight_str(self._nsb.second_injection_weight_before)

    @property
    def aind_virus_a_p(self) -> Optional[Decimal]:
        """Maps virus_a_p to aind model"""
        return self._parse_ap_str(self._nsb.virus_x0020_a_x002f_p)

    @property
    def aind_virus_d_v(self) -> Optional[Decimal]:
        """Maps virus_d_v to aind model"""
        return self._parse_dv_str(self._nsb.virus_x0020_d_x002f_v)

    @property
    def aind_virus_hemisphere(self) -> Optional[AnatomicalRelative]:
        """Maps virus_hemisphere to aind model"""
        return (
            None
            if self._nsb.virus_x0020_hemisphere is None
            else {
                self._nsb.virus_x0020_hemisphere.SELECT: None,
                self._nsb.virus_x0020_hemisphere.LEFT: AnatomicalRelative.LEFT,
                self._nsb.virus_x0020_hemisphere.RIGHT: AnatomicalRelative.RIGHT,
            }.get(self._nsb.virus_x0020_hemisphere, None)
        )

    @property
    def aind_virus_m_l(self) -> Optional[Decimal]:
        """Maps virus_m_l to aind model"""
        return self._parse_ml_str(self._nsb.virus_x0020_m_x002f_l)

    @property
    def aind_weight_after_surgery(self) -> Optional[Decimal]:
        """Maps weight_after_surgery to aind model"""
        return self._parse_weight_str(
            self._nsb.weight_x0020_after_x0020_surgery
        )

    @property
    def aind_weight_before_surger(self) -> Optional[Decimal]:
        """Maps weight_before_surger to aind model"""
        return self._parse_weight_str(
            self._nsb.weight_x0020_before_x0020_surger
        )

    @property
    def aind_work_station1st_injection(self) -> Optional[str]:
        """Maps work_station1st_injection to aind model"""
        return (
            None
            if self._nsb.work_station1st_injection is None
            else {
                self._nsb.work_station1st_injection.SELECT: None,
                self._nsb.work_station1st_injection.SWS_1: (
                    self._nsb.work_station1st_injection.SWS_1.value
                ),
                self._nsb.work_station1st_injection.SWS_2: (
                    self._nsb.work_station1st_injection.SWS_2.value
                ),
                self._nsb.work_station1st_injection.SWS_3: (
                    self._nsb.work_station1st_injection.SWS_3.value
                ),
                self._nsb.work_station1st_injection.SWS_4: (
                    self._nsb.work_station1st_injection.SWS_4.value
                ),
                self._nsb.work_station1st_injection.SWS_5: (
                    self._nsb.work_station1st_injection.SWS_5.value
                ),
                self._nsb.work_station1st_injection.SWS_6: (
                    self._nsb.work_station1st_injection.SWS_6.value
                ),
                self._nsb.work_station1st_injection.SWS_7: (
                    self._nsb.work_station1st_injection.SWS_7.value
                ),
                self._nsb.work_station1st_injection.SWS_8: (
                    self._nsb.work_station1st_injection.SWS_8.value
                ),
                self._nsb.work_station1st_injection.SWS_9: (
                    self._nsb.work_station1st_injection.SWS_9.value
                ),
            }.get(self._nsb.work_station1st_injection, None)
        )

    @property
    def aind_work_station2nd_injection(self) -> Optional[str]:
        """Maps work_station2nd_injection to aind model"""
        return (
            None
            if self._nsb.work_station2nd_injection is None
            else {
                self._nsb.work_station2nd_injection.SELECT: None,
                self._nsb.work_station2nd_injection.SWS_1: (
                    self._nsb.work_station2nd_injection.SWS_1.value
                ),
                self._nsb.work_station2nd_injection.SWS_2: (
                    self._nsb.work_station2nd_injection.SWS_2.value
                ),
                self._nsb.work_station2nd_injection.SWS_3: (
                    self._nsb.work_station2nd_injection.SWS_3.value
                ),
                self._nsb.work_station2nd_injection.SWS_4: (
                    self._nsb.work_station2nd_injection.SWS_4.value
                ),
                self._nsb.work_station2nd_injection.SWS_5: (
                    self._nsb.work_station2nd_injection.SWS_5.value
                ),
                self._nsb.work_station2nd_injection.SWS_6: (
                    self._nsb.work_station2nd_injection.SWS_6.value
                ),
                self._nsb.work_station2nd_injection.SWS_7: (
                    self._nsb.work_station2nd_injection.SWS_7.value
                ),
                self._nsb.work_station2nd_injection.SWS_8: (
                    self._nsb.work_station2nd_injection.SWS_8.value
                ),
                self._nsb.work_station2nd_injection.SWS_9: (
                    self._nsb.work_station2nd_injection.SWS_9.value
                ),
            }.get(self._nsb.work_station2nd_injection, None)
        )

    @property
    def aind_experimenter_full_name(self) -> str:
        """Map author id to experimenter name"""
        return (
            "NSB"
            if self.aind_author_id is None
            else f"NSB-{self.aind_author_id}"
        )

    @property
    def aind_anaesthetic_type(self) -> str:
        """Default anaesthetic type"""
        return "isoflurane"

    @property
    def aind_craniotomy_size(self) -> Optional[Decimal]:
        """Map craniotomy type to size in mm"""
        return (
            None
            if self.aind_craniotomy_type is None
            else {
                self._nsb.craniotomy_type.VISUAL_CORTEX_5MM: (
                    Decimal(5)
                ),
                self._nsb.craniotomy_type.FRONTAL_WINDOW_3MM: (
                    Decimal(3)
                ),
            }.get(self.aind_craniotomy_type, None)
        )

    @property
    def aind_craniotomy_coordinates_reference(
        self,
    ) -> Optional[CoordinateSystem]:
        """Map craniotomy type to Origin"""
        # TODO: need to handle frontal window 3mm
        if self._nsb.craniotomy_type is not None and self._nsb.craniotomy_type==self._nsb.craniotomy_type.VISUAL_CORTEX_5MM:
            return CoordinateSystem(
                name="LAMBDA_ARI",
                origin=Origin.LAMBDA,
                axis_unit=SizeUnit.MM,
                axes=[
                    Axis(name=AxisName.AP, direction=Direction.PA),
                    Axis(name=AxisName.ML, direction=Direction.LR),
                    Axis(name=AxisName.SI, direction=Direction.SI),
                ],
            )
        else:
            return None
        
    @property
    def aind_inj1_coordinates_reference(
        self,
    ) -> Optional[CoordinateSystem]:
        """Map nsb inj1 field to Coordinate System"""
        if (
            self._nsb.virus_x0020_a_x002f_p is not None
            and "LAMBDA" in self._nsb.virus_x0020_a_x002f_p.upper()
        ):
            return CoordinateSystem(
                name="LAMBDA_ARID",
                origin=Origin.LAMBDA,
                axis_unit=SizeUnit.MM,
                axes=[
                    Axis(name=AxisName.AP, direction=Direction.PA),
                    Axis(name=AxisName.ML, direction=Direction.LR),
                    Axis(name=AxisName.SI, direction=Direction.SI),
                    Axis(name=AxisName.DEPTH, direction=Direction.UD),
                ],
            )
        elif(
            self._nsb.virus_x0020_a_x002f_p and
            self._nsb.virus_x0020_m_x002f_l and 
            not self._nsb.virus_x0020_d_x002f_v
        ):
            return CoordinateSystemLibrary.BREGMA_ARI
        elif(
            self._nsb.virus_x0020_a_x002f_p and
            self._nsb.virus_x0020_m_x002f_l and
            self._nsb.virus_x0020_d_x002f_v
        ):
            return CoordinateSystemLibrary.BREGMA_ARID
        
    @property
    def aind_inj1_dynamics(self) -> InjectionDynamics:
        """Get injection dynamics for first injection"""
        dynamics_kwargs = {
            "profile": InjectionProfile.BOLUS,
            "duration": self.aind_inj1_lenghtof_time,
            "duration_unit": TimeUnit.M,
        }

        if self.aind_inj1_type == InjectionType.NANOJECT:
            dynamics_kwargs.update({
                "volume": self.aind_inj1_vol,
                "volume_unit": VolumeUnit.NL,
            })
        elif self.aind_inj1_type == InjectionType.IONTOPHORESIS:
            dynamics_kwargs.update({
                "injection_current": self.aind_inj1_current,
                "injection_current_unit": CurrentUnit.UA,
                "alternating_current": self.aind_inj1_alternating_time,
            })
            
        try:
            return InjectionDynamics(**dynamics_kwargs)
        except ValidationError:
            return InjectionDynamics.model_construct(**dynamics_kwargs)

    @property
    def aind_inj2_coordinates_reference(
        self,
    ) -> Optional[CoordinateSystem]:
        """Map nsb inj2 field to Coordinate System"""
        if (
            self._nsb.ap2nd_inj is not None
            and "LAMBDA" in self._nsb.ap2nd_inj.upper()
        ):
            return CoordinateSystem(
                name="LAMBDA_ARID",
                origin=Origin.LAMBDA,
                axis_unit=SizeUnit.MM,
                axes=[
                    Axis(name=AxisName.AP, direction=Direction.PA),
                    Axis(name=AxisName.ML, direction=Direction.LR),
                    Axis(name=AxisName.SI, direction=Direction.SI),
                    Axis(name=AxisName.DEPTH, direction=Direction.UD),
                ],
            )
        elif(
            self._nsb.ap2nd_inj is not None
            and self._nsb.ml2nd_inj is not None
            and self._nsb.dv2nd_inj is None
        ):
            return CoordinateSystemLibrary.BREGMA_ARI
        elif(
            self._nsb.ap2nd_inj is not None
            and self._nsb.ml2nd_inj is not None
            and self._nsb.dv2nd_inj is not None
        ):
            return CoordinateSystemLibrary.BREGMA_ARID
        else:
            return None
        
    @property
    def aind_inj2_dynamics(self) -> InjectionDynamics:
        """Get injection dynamics for second injection"""
        dynamics_kwargs = {
            "profile": InjectionProfile.BOLUS,
            "duration": self.aind_inj2_lenghtof_time,
            "duration_unit": TimeUnit.M,
        }

        if self.aind_inj2_type == InjectionType.NANOJECT:
            dynamics_kwargs.update({
                "volume": self.aind_inj2_vol,
                "volume_unit": VolumeUnit.NL,
            })
        elif self.aind_inj2_type == InjectionType.IONTOPHORESIS:
            dynamics_kwargs.update({
                "injection_current": self.aind_inj2_current,
                "injection_current_unit": CurrentUnit.UA,
                "alternating_current": self.aind_inj2_alternating_time,
            })
            
        try:
            return [InjectionDynamics(**dynamics_kwargs)]
        except ValidationError:
            return [InjectionDynamics.model_construct(**dynamics_kwargs)]

    @property
    def has_injection_procedure(self) -> bool:
        """Return true if injection procedure in nsb list"""
        if self._nsb.procedure is None:
            return False
        else:
            return {
                self._nsb.procedure.INJHPC: True,
                self._nsb.procedure.INJWHC_NP: True,
                self._nsb.procedure.HPINJ: True,
                self._nsb.procedure.HP_INJECTION_OPTIC_FIBER: True,
                self._nsb.procedure.STEREOTAXIC_INJECTION: True,
            }.get(self._nsb.procedure, False)

    @property
    def has_second_injection_procedure(self) -> bool:
        """Return true if second injection in nsb list"""
        if self.aind_inj2_round is not None or self.aind_inj2_type is not None:
            return True
        else:
            return False

    @property
    def has_craniotomy_procedure(self) -> bool:
        """Return true if craniotomy procedure in nsb list"""
        if self._nsb.procedure is None:
            return False
        else:
            return {
                self._nsb.procedure.HPC_CAM: True,
                self._nsb.procedure.HPC_MULTISCOPE: True,
                self._nsb.procedure.HPC_NEUROPIXEL_STYLE: True,
                self._nsb.procedure.INJHPC: True,
                self._nsb.procedure.WHC_NP: True,
                self._nsb.procedure.INJWHC_NP: True,
            }.get(self._nsb.procedure, False)

    @property
    def has_head_frame_procedure(self) -> bool:
        """Return true if headframe procedure in nsb list"""
        if self._nsb.procedure is None:
            return False
        else:
            return {
                self._nsb.procedure.HPC_CAM: True,
                self._nsb.procedure.HPC_MULTISCOPE: True,
                self._nsb.procedure.HPC_NEUROPIXEL_STYLE: True,
                self._nsb.procedure.INJHPC: True,
                self._nsb.procedure.HPINJ: True,
                self._nsb.procedure.HP_TRANSCRANIAL_FOR_ISI: True,
                self._nsb.procedure.HP_ONLY: True,
                self._nsb.procedure.HP_INJECTION_OPTIC_FIBER: True,
            }.get(self._nsb.procedure, False)

    @property
    def has_fiber_implant_procedure(self) -> bool:
        """Return true if fiber implant procedure in nsb list"""
        if self._nsb.procedure is None:
            return False
        else:
            return {
                self._nsb.procedure.HP_INJECTION_OPTIC_FIBER: True,
            }.get(self._nsb.procedure, False)

    def get_basic_surgery(self) -> Surgery:
        """Get a basic surgery if non-procedures info is available."""
        return Surgery.model_construct(
            start_date=self.aind_date_of_surgery,
            experimenters=[self.aind_experimenter_full_name],
            ethics_review_id=self.aind_iacuc_protocol,
            animal_weight_prior=self.aind_weight_before_surger,
            animal_weight_post=self.aind_weight_after_surgery,
        )

    @property
    def has_unknown_surgery(self) -> bool:
        """Return true if no known procedures are found but data is found"""
        if self._nsb.procedure is None and self.aind_date_of_surgery is None:
            return False
        elif self._nsb.procedure is None:
            return True
        else:
            return not (
                self.has_injection_procedure
                or self.has_fiber_implant_procedure
                or self.has_craniotomy_procedure
                or self.has_head_frame_procedure
            )
        
    def get_head_frame_procedure(self) -> Headframe:
        """Get head frame procedure"""
        try:
            return Headframe(
                headframe_type=self.aind_headpost_type.headframe_type,
                headframe_part_number=self.aind_headpost_type.headframe_part_number,
                well_part_number=self.aind_headpost_type.well_part_number,
                well_type=self.aind_headpost_type.well_type,
            )
        except ValidationError:
            return Headframe.model_construct(
                headframe_type=self.aind_headpost_type.headframe_type,
                headframe_part_number=(
                    self.aind_headpost_type.headframe_part_number
                ),
                well_part_number=self.aind_headpost_type.well_part_number,
                well_type=self.aind_headpost_type.well_type,
            )

    def get_craniotomy_procedure(self) -> Craniotomy:
        """Get craniotomy procedure"""
        coordinate_system_name = (
            self.aind_craniotomy_coordinates_reference.name
            if self.aind_craniotomy_coordinates_reference is not None
            else CoordinateSystemLibrary.BREGMA_ARID.name
        )
        try:
            return Craniotomy(
                craniotomy_type=self.aind_craniotomy_type,
                coordinate_system_name=coordinate_system_name,
                position=self.aind_hp_loc,
                size=self.aind_craniotomy_size,
                size_unit=SizeUnit.MM if self.aind_craniotomy_size else None,
                dura_removed=self.aind_hp_durotomy,
            )
        except ValidationError:
            return Craniotomy.model_construct(
                craniotomy_type=self.aind_craniotomy_type,
                coordinate_system_name=coordinate_system_name,
                position=self.aind_hp_loc,
                size=self.aind_craniotomy_size,
                size_unit=SizeUnit.MM if self.aind_craniotomy_size else None,
                dura_removed=self.aind_hp_durotomy,
            )
        
    @staticmethod
    def _get_transform(
        angle: Optional[Decimal], ml: Optional[Decimal], ap: Optional[Decimal], depth: Optional[Decimal],
    ) -> List[Union[Translation, Rotation]]:
        """Get transform"""
        
        ap = ap if ap is not None else 0
        ml = ml if ml is not None else 0
        angle = angle if angle is not None else 0

        if depth is None:
            translation = Translation(translation=[ap, ml, 0])
            rotation = Rotation(angles=[angle, 0, 0], angles_unit=AngleUnit.DEG)
        else:
            translation = Translation(translation=[ap, ml, 0, depth])
            rotation = Rotation(angles=[angle, 0, 0, 0], angles_unit=AngleUnit.DEG)
        return [translation, rotation]

    def get_first_injection_procedure(self) -> BrainInjection:
        """Get first injection procedure"""
        injection_materials = []
        # Currently not parsing virus strain field
        # if self.aind_inj1_virus_strain_rt is not None:
        #     injection_materials.append(ViralMaterial(name=self.aind_inj1_virus_strain_rt))

        coordinate_system_name = self.aind_inj1_coordinates_reference.name if self.aind_inj1_coordinates_reference else None
        coordinates = (
            self._get_transform(
                angle=self.aind_inj1angle0, ml=self.aind_virus_m_l,
                ap=self.aind_virus_a_p, depth=self.aind_virus_d_v,
            )
            if coordinate_system_name is not None else None
        )
        try:
            return BrainInjection(
                injection_materials=injection_materials,
                relative_position=[self.aind_virus_hemisphere],
                dynamics=[self.aind_inj1_dynamics],
                coordinate_system_name=coordinate_system_name,
                coordinates=[coordinates],
            )
        except ValidationError:
            return BrainInjection.model_construct(
                injection_materials=injection_materials,
                relative_position=[self.aind_virus_hemisphere],
                dynamics=[self.aind_inj1_dynamics],
                coordinate_system_name=coordinate_system_name,
                coordinates=[coordinates],
            )

    def get_second_injection_procedure(self) -> BrainInjection:
        """Get second injection procedure"""
        injection_materials = []
        # if self.aind_inj2_virus_strain_rt is not None:
        #     injection_materials.append(ViralMaterial(name=self.aind_inj2_virus_strain_rt))

        coordinate_system_name = (
            self.aind_inj2_coordinates_reference.name
            if self.aind_inj2_coordinates_reference else None
        )
        coordinates = (
            self._get_transform(
                angle=self.aind_inj2angle0, ml=self.aind_ml2nd_inj,
                ap=self.aind_ap2nd_inj, depth=self.aind_dv2nd_inj,
            )
            if coordinate_system_name is not None else None
        )

        try:
            return BrainInjection(
                injection_materials=injection_materials,
                relative_position=[self.aind_hemisphere2nd_inj],
                dynamics=[self.aind_inj2_dynamics],
                coordinate_system_name=coordinate_system_name,
                coordinates=[coordinates],
            )
        except ValidationError:
            return BrainInjection.model_construct(
                injection_materials=injection_materials,
                relative_position=[self.aind_hemisphere2nd_inj],
                dynamics=[self.aind_inj2_dynamics],
                coordinate_system_name=coordinate_system_name,
                coordinates=[coordinates],
            )
    
    def get_fiber_implants(self) -> List[ProbeImplant]:
        """Get a fiber implant procedure"""
        # Need to figure out core_diameter, numerical_aperture, total_length,
        probe_implants = []
        coordinate_system = CoordinateSystem(
            name="FIBER_PROBE_RSAB",
            origin=Origin.TIP,
            axis_unit=SizeUnit.MM,
            axes=[
                Axis(name=AxisName.X, direction=Direction.LR),
                Axis(name=AxisName.Y, direction=Direction.IS),
                Axis(name=AxisName.Z, direction=Direction.PA),
                Axis(name=AxisName.DEPTH, direction=Direction.UD),
            ],
        )
        if self.aind_fiber_implant1:
            fiber_probe = FiberProbe.model_construct(
                name="Probe A",
            )
            transform = self._get_transform(
                angle=self.aind_inj1_angle_v2, ml=self.aind_virus_m_l,
                ap=self.aind_virus_a_p, depth=self.aind_fiber_implant1_dv,
            )
            probe_implants.append(
                ProbeImplant(
                    implanted_device=fiber_probe,
                    device_config=ProbeConfig(
                        primary_targeted_structure=CCFv3.ROOT,
                        device_name="Probe A",
                        coordinate_system=coordinate_system,
                        transform=transform,
                    )
                )
            )
        if self.aind_fiber_implant2:
            fiber_probe = FiberProbe.model_construct(
                name="Probe B",
            )
            transform = self._get_transform(
                angle=self.aind_inj2_angle_v2, ml=self.aind_virus_m_l,
                ap=self.aind_virus_a_p, depth=self.aind_fiber_implant2_dv,
            )
            probe_implants.append(
                ProbeImplant(
                    implanted_device=fiber_probe,
                    device_config=ProbeConfig(
                        primary_targeted_structure=CCFv3.ROOT,
                        device_name="Probe B",
                        coordinate_system=coordinate_system,
                        transform=transform,
                    )
                )
            )
        return probe_implants

    @staticmethod
    def get_measured_coordinates(b2l_dist: Optional[Decimal], coordinate_system_name: Optional[str]) -> Optional[Dict[Origin, Translation]]:
        """Get measured coordinates"""
        if b2l_dist is None:
            return None
        else:
            if coordinate_system_name and "LAMBDA" in coordinate_system_name:
                b2l_dist = -b2l_dist
                origin = Origin.LAMBDA
            else:
                origin = Origin.BREGMA
            return {origin: Translation(translation=[b2l_dist, 0, 0])}


    def get_surgeries(self) -> List[Surgery]:
        """Return Surgery as best as possible from a record."""

        experimenters = [self.aind_experimenter_full_name]
        ethics_review_id = self.aind_iacuc_protocol
        surgeries = []

        # Add craniotomy, headframe, and fiber implant into one surgery
        procedures = []
        if self.has_head_frame_procedure:
            procedures.append(self.get_head_frame_procedure())
        if self.has_craniotomy_procedure:
            procedures.append(self.get_craniotomy_procedure())
        if self.has_fiber_implant_procedure:
            procedures.extend(self.get_fiber_implants())
        if (
            self.has_head_frame_procedure
            or self.has_craniotomy_procedure
            or self.has_fiber_implant_procedure
        ):
            start_date = self.aind_date_of_surgery
            animal_weight_prior = self.aind_weight_before_surger
            animal_weight_post = self.aind_weight_after_surgery
            workstation_id = self.aind_hp_work_station
            # duration is missing
            anaesthesia = Anaesthetic.model_construct(
                    anaesthetic_type=self.aind_anaesthetic_type,
                    level=self.aind_hp_iso_level,
                )
            try:
                surgery = Surgery(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=procedures,
                    coordinate_system=self.aind_craniotomy_coordinates_reference
                )
            except ValidationError:
                surgery = Surgery.model_construct(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=procedures,
                    coordinate_system=self.aind_craniotomy_coordinates_reference
                )
            surgeries.append(surgery)

        # create a surgery for 1st injection
        if self.has_injection_procedure:
            injection = self.get_first_injection_procedure()
            start_date = self.aind_date1st_injection
            animal_weight_prior = self.aind_first_injection_weight_be
            animal_weight_post = self.aind_first_injection_weight_af
            workstation_id = self.aind_work_station1st_injection
            measured_coordinates = self.get_measured_coordinates(
                b2l_dist=self.aind_breg2_lamb,
                coordinate_system_name=injection.coordinate_system_name
            )
            try:
                anaesthesia = Anaesthetic(
                    anaesthetic_type=self.aind_anaesthetic_type,
                    duration=self.aind_first_injection_iso_durat,
                    level=self.aind_round1_inj_isolevel,
                )
                surgery = Surgery(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=[injection],
                    measured_coordinates=measured_coordinates,
                    coordinate_system=self.aind_inj1_coordinates_reference
                )
            except ValidationError:
                anaesthesia = Anaesthetic.model_construct(
                    anaesthetic_type=self.aind_anaesthetic_type,
                    duration=self.aind_first_injection_iso_durat,
                    level=self.aind_round1_inj_isolevel,
                )
                surgery = Surgery.model_construct(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=[injection],
                    measured_coordinates=measured_coordinates,
                    coordinate_system=self.aind_inj1_coordinates_reference
                )
            surgeries.append(surgery)

        # create a surgery for 2nd injection
        if (
            self.has_injection_procedure
            and self.has_second_injection_procedure
        ):
            injection = self.get_second_injection_procedure()
            start_date = self.aind_date2nd_injection
            animal_weight_prior = self.aind_second_injection_weight_b
            animal_weight_post = self.aind_second_injection_weight_a
            workstation_id = self.aind_work_station2nd_injection
            measured_coordinates = self.get_measured_coordinates(
                b2l_dist=self.aind_breg2_lamb,
                coordinate_system_name=injection.coordinate_system_name
            )
            try:
                anaesthesia = Anaesthetic(
                    anaesthetic_type=self.aind_anaesthetic_type,
                    duration=self.aind_second_injection_iso_dura,
                    level=self.aind_round2_inj_isolevel,
                )
                surgery = Surgery(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=[injection],
                    measured_coordinates=measured_coordinates,
                    coordinate_system=self.aind_inj2_coordinates_reference,
                )
            except ValidationError:
                anaesthesia = Anaesthetic.model_construct(
                    anaesthetic_type=self.aind_anaesthetic_type,
                    duration=self.aind_second_injection_iso_dura,
                    level=self.aind_round2_inj_isolevel,
                )
                surgery = Surgery.model_construct(
                    start_date=start_date,
                    experimenters=experimenters,
                    ethics_review_id=ethics_review_id,
                    animal_weight_prior=animal_weight_prior,
                    animal_weight_post=animal_weight_post,
                    anaesthesia=anaesthesia,
                    workstation_id=workstation_id,
                    procedures=[injection],
                    measured_coordinates=measured_coordinates,
                    coordinate_system=self.aind_inj2_coordinates_reference
                )
            surgeries.append(surgery)

        if self.has_unknown_surgery:
            surgeries.append(self.get_basic_surgery())
        return surgeries