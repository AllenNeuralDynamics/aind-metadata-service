[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "aind_metadata_service"
description = "REST service to retrive metadata from databases."
license = {text = "MIT"}
authors = [
    {name = "Allen Institute for Neural Dynamics"}
]
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3"
]
readme = "README.md"
dynamic = ["version"]

dependencies = [
    'pydantic>=2.10',
    'aind-metadata-mapper[bergamo]==0.21.0',
    'aind-data-schema==1.2.0',
    'aind-data-schema-models==0.6.4',
    'pydantic-settings>=2.0'
]

[project.optional-dependencies]
dev = [
    'aind-metadata-service[server]',
    'aind-metadata-service[client]',
    'black',
    'coverage',
    'fakeredis',
    'flake8',
    'interrogate',
    'isort',
    'pytest',
    'pytest-mock',
    'pytest-env',
    'pytest_asyncio',
]

server = [
    'pyodbc',
    'pydash',
    'office365-rest-python-client==2.4.1',
    'aind-smartsheet-api==0.1.2',
    'fastapi>=0.114.0',
    'fastapi-cache2[redis]>=0.2.2',
    'sqlmodel',
    'uvicorn[standard]',
    'python-dateutil',
    'xmltodict==0.13.0',
    'aind-slims-api>=0.1.21',
    'azure-identity==1.15.0',
    'pydantic-xml',
    'httpx'
]

client = [
    'requests'
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.dynamic]
version = {attr = "aind_metadata_service.__version__"}
readme = {file = ["README.md"]}

[tool.black]
line-length = 79
target_version = ['py310']
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | build
    | dist
  )/
  | .gitignore
)
'''

[tool.coverage.run]
omit = ["*__init__*"]
source = ["aind_metadata_service", "tests"]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "from",
    "import",
    "pragma: no cover"
]
fail_under = 100

[tool.isort]
line_length = 79
profile = "black"

[tool.interrogate]
exclude = ["setup.py", "docs", "build"]
fail-under = 100

[tool.pytest.ini_options]
asyncio_mode="auto"
asyncio_default_fixture_loop_scope="function"
env = [
    "LABTRACKS_HOST=lb_host",
    "LABTRACKS_PASSWORD=lb_password",
    "LABTRACKS_USER=lb_user",
    "LABTRACKS_PORT=123",
    "LABTRACKS_DATABASE=lb_db",
    "SLIMS_URL=http://slims.example.com",
    "SLIMS_USERNAME=slims_user",
    "SLIMS_PASSWORD=slims_password",
    "SMARTSHEET_FUNDING_ID=1000",
    "SMARTSHEET_PERFUSIONS_ID=1001",
    "SMARTSHEET_PROTOCOLS_ID=1002",
    "SMARTSHEET_ACCESS_TOKEN=abc-123",
    "SMARTSHEET_USER_AGENT=some_user_agent",
    "TARS_TENANT_ID=tars-tenant-id",
    "TARS_CLIENT_ID=123456",
    "TARS_CLIENT_SECRET=tars_secret",
    "TARS_SCOPE=https://scope.example.com",
    "TARS_RESOURCE=https://res.example.com"
]
filterwarnings = ["ignore::DeprecationWarning:smartsheet"]
