name: Tag and publish main
on:
  push:
    branches:
      - main

jobs:
  update_badges:
    runs-on: ubuntu-latest
    continue-on-error: true
    defaults:
      run:
        working-directory: ./aind-metadata-service-server
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ env.DEFAULT_BRANCH }}
        fetch-depth: 0
        token: ${{ secrets.SERVICE_TOKEN }}
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: | 
        pip install --upgrade setuptools wheel
        python -m pip install -e .[dev] --no-cache-dir
    - name: Get Python version and Update README.md
      run: |
        python_version=$(grep "requires-python" pyproject.toml | grep -o ">=[^\"]*")
        python_badge=$(grep '^\!\[Python\]' README.md | sed -n 's/.*\(python-[^)]*\).*/\1/p')
        new_python_badge="python-$python_version-blue?logo=python"
        sed -i "s/$python_badge/$new_python_badge/g" README.md
    - name: Get interrogate values and Update README.md
      run: |
        interrogate_val=$(interrogate . | grep -o 'actual: [0-9]*\.[0-9]*' | awk '{print $2}')
        interrogate_badge=$(grep '^\!\[Interrogate\]' README.md | sed -n 's/.*\(interrogate-[^)]*\).*/\1/p')
        if (( $(echo "$interrogate_val >= 90.00" | bc -l) )); then
            new_interrogate_badge="interrogate-$interrogate_val%25-brightgreen"
        elif (( $(echo "$interrogate_val < 80.00" | bc -l) )); then
            new_interrogate_badge="interrogate-$interrogate_val%25-red"
        else
            new_interrogate_badge="interrogate-$interrogate_val%25-yellow"
        fi
        sed -i "s/$interrogate_badge/$new_interrogate_badge/g" README.md
    - name: Get Coverage values and Update README.md
      run: |
        coverage run -m pytest
        coverage_val=$(coverage report | grep "^TOTAL" | grep -o '[0-9]\+%' | grep -o '[0-9]\+')
        coverage_badge=$(grep '^\!\[Coverage\]' README.md | sed -n 's/.*\(coverage-[^)]*\).*/\1/p')
        if (( $(echo "$coverage_val >= 90.00" | bc -l) )); then 
            new_coverage_badge="coverage-$coverage_val%25-brightgreen"
        elif (( $(echo "$coverage_val < 80.00" | bc -l) )); then
            new_coverage_badge="coverage-$coverage_val%25-red"
        else
            new_coverage_badge="coverage-$coverage_val%25-yellow"
        fi
        sed -i "s/$coverage_badge/$new_coverage_badge/g" README.md
    - name: Commit changes
      uses: EndBug/add-and-commit@v9
      with:
        default_author: github_actions
        message: "ci: update badges [skip actions]"
        add: '["aind-metadata-service-server/README.md"]'
  get_version:
    name: Get version
    needs: update_badges
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.output_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: output_version
        run: |
          ls .
          init_file="./aind-metadata-service-server/src/aind_metadata_service_server/__init__.py"
          pkg_version=$(grep -Po '[0-9]+\.[0-9]+\.[0-9]+' "$init_file")
          echo "new_version=$pkg_version" >> "$GITHUB_OUTPUT"
  build_client:
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.default_branch }}
          fetch-depth: 0
          token: ${{ secrets.SERVICE_TOKEN }}
      - name: Pull latest changes
        run: git pull origin main
      - name: Update version
        run: |
          sed -i --debug --expression="s|packageVersion.*|packageVersion\": \"${{ needs.get_version.outputs.new_version }}\"|" openapirc.json
          sed -i --debug --expression="s|packageVersion.*|packageVersion\": \"${{ needs.get_version.outputs.new_version }}\"|" openapirc_async.json
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: | 
          pip install --upgrade setuptools wheel
          python -m pip install -e aind-metadata-service-server --no-cache-dir
          python -m pip install toml
      - name: Generate OpenAPI file
        run: |
          python scripts/generate_openapi.py
      - name: Generate Python Client
        uses: openapi-generators/openapitools-generator-action@v1.5.0
        with:
          generator: python
          generator-tag: v7.13.0
          openapi-file: openapi.json
          config-file: openapirc.json
      - name: Handle files
        run: |
          rm -rf aind-metadata-service-client
          mv python-client aind-metadata-service-client
          rm -rf aind-metadata-service-client/.github
          rm -f aind-metadata-service-client/.gitignore
          rm -f aind-metadata-service-client/.gitlab-ci.yml
          rm -f aind-metadata-service-client/git_push.sh
          rm -f aind-metadata-service-client/.travis.yml
      - name: Generate Python Async Client
        uses: openapi-generators/openapitools-generator-action@v1.5.0
        with:
          generator: python
          generator-tag: v7.13.0
          openapi-file: openapi.json
          config-file: openapirc_async.json
      - name: Handle async files
        run: |
          rm -rf aind-metadata-service-async-client
          mv python-client aind-metadata-service-async-client
          rm -rf aind-metadata-service-async-client/.github
          rm -f aind-metadata-service-async-client/.gitignore
          rm -f aind-metadata-service-async-client/.gitlab-ci.yml
          rm -f aind-metadata-service-async-client/git_push.sh
          rm -f aind-metadata-service-async-client/.travis.yml
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: "ci: add clients [skip actions]"
          add: '["openapirc.json","aind-metadata-service-client","openapirc_async.json","aind-metadata-service-async-client"]'
  update_tag:
    runs-on: ubuntu-latest
    needs: [get_version, build_client]
    steps:
      - uses: actions/checkout@v4
      - name: Pull latest changes
        run: git pull origin main
      - name: Update tag
        run: |
          git tag v${{ needs.get_version.outputs.new_version }}
          git push origin v${{ needs.get_version.outputs.new_version }}
  publish_server:
    runs-on: ubuntu-latest
    needs: [get_version, update_tag]
    defaults:
      run:
        working-directory: ./aind-metadata-service-server
    steps:
      - uses: actions/checkout@v4
      - name: Pull latest changes
        run: git pull origin main
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build image and push to GitHub Container Registry
        uses: docker/build-push-action@v3
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./aind-metadata-service-server
          push: true
          tags: |
            ghcr.io/allenneuraldynamics/aind-metadata-service-server:${{ needs.get_version.outputs.new_version }}
            ghcr.io/allenneuraldynamics/aind-metadata-service-server:latest
  publish_client:
    runs-on: ubuntu-latest
    needs: update_tag
    defaults:
      run:
        working-directory: ./aind-metadata-service-client
    steps:
      - uses: actions/checkout@v4
      - name: Pull latest changes
        run: git pull origin main
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install --upgrade setuptools wheel twine build
          python -m build
          twine check dist/*
      - name: Publish on PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          packages-dir: ./aind-metadata-service-client/dist
          password: ${{ secrets.AIND_PYPI_TOKEN }}
  publish_async_client:
    runs-on: ubuntu-latest
    needs: update_tag
    defaults:
      run:
        working-directory: ./aind-metadata-service-async-client
    steps:
      - uses: actions/checkout@v4
      - name: Pull latest changes
        run: git pull origin main
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install --upgrade setuptools wheel twine build
          python -m build
          twine check dist/*
      - name: Publish on PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          packages-dir: ./aind-metadata-service-async-client/dist
          password: ${{ secrets.AIND_PYPI_TOKEN }}
